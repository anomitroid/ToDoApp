(()=>{"use strict";var t={22:(t,e,r)=>{r.d(e,{A:()=>c});var n=r(354),o=r.n(n),i=r(314),a=r.n(i)()(o());a.push([t.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,main,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section{display:block}*[hidden]{display:none}body{line-height:1}menu,ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}*,*::before,*::after{box-sizing:border-box}*{margin:0;padding:0}img,picture,video,canvas,svg{display:block;max-width:100%}p,h1,h2,h3,h4,h5,h6{overflow-wrap:break-word;hyphens:auto}button,[type=button],[type=reset],[type=submit]{appearance:button;-webkit-appearance:button}::-moz-focus-inner{border-style:none;padding:0}body{font-family:system-ui,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";line-height:1.5;-webkit-font-smoothing:antialiased;-webkit-text-size-adjust:100%}input,button,textarea,select,p{font:inherit;font-size:1rem}.hidden{display:none !important}.auto-grow{display:grid}.auto-grow::after{content:attr(data-value) " ";white-space:pre-wrap;visibility:hidden}.auto-grow::after,.auto-grow>textarea,.auto-grow>p{grid-area:1/1/2/2}.auto-grow>textarea,.auto-grow>p{resize:none;overflow:hidden}*{transition:color,background-color .3s ease}.btn{cursor:pointer;border:none;color:inherit;background:none}.btn-icon svg{width:1.5rem;height:1.5rem;min-width:1.5rem;min-height:1.5rem}.btn-add-task{display:flex;align-items:center;font-weight:700;color:#3b82f6}body.theme-dark .btn-add-task{color:#3b82f6}.btn-add-task-l{gap:.75rem;font-size:1.5rem}.btn-add-task-l>svg{width:2rem;height:2rem;min-width:2rem;min-height:2rem}.btn-project-edit{margin-left:auto}.btn-func{border-radius:.5rem;padding:.5rem 1rem;font-size:1rem}.btn-func-primary{color:#fff;background-color:#3b82f6}body.theme-dark .btn-func-primary{color:#fff;background-color:#3b82f6}.btn-func-primary:disabled{color:#a1a1aa;background-color:#e4e4e7}body.theme-dark .btn-func-primary:disabled{color:#18181b;background-color:#52525b}.btn-func-secondary{color:#18181b;background-color:#e4e4e7}body.theme-dark .btn-func-secondary{color:#f4f4f5;background-color:#3f3f46}.btn-select{display:flex;align-items:center;gap:.8rem}.btn-select{color:#18181b}body.theme-dark .btn-select{color:#f4f4f5}.btn-select-priority-1{color:#b91c1c !important}.btn-select-priority-1 .svg-fill path{fill:#b91c1c !important}.btn-select-priority-1 .svg-stroke path{stroke:#b91c1c !important}.btn-select-priority-2{color:#d97706 !important}.btn-select-priority-2 .svg-fill path{fill:#d97706 !important}.btn-select-priority-2 .svg-stroke path{stroke:#d97706 !important}.btn-select-priority-3{color:#16a34a !important}.btn-select-priority-3 .svg-fill path{fill:#16a34a !important}.btn-select-priority-3 .svg-stroke path{stroke:#16a34a !important}.btn-label{position:relative;display:flex;align-items:center;padding:.25rem .5rem;border-radius:.25rem;gap:.5rem;margin:0 !important;color:#18181b;border:1px solid #71717a}body.theme-dark .btn-label{color:#f4f4f5;border:1px solid #a1a1aa}.btn-label-priority-1{color:#b91c1c !important;border-color:#b91c1c !important;color:#b91c1c !important}.btn-label-priority-1 .svg-fill path{fill:#b91c1c !important}.btn-label-priority-1 .svg-stroke path{stroke:#b91c1c !important}.btn-label-priority-2{color:#d97706 !important;border-color:#d97706 !important;color:#d97706 !important}.btn-label-priority-2 .svg-fill path{fill:#d97706 !important}.btn-label-priority-2 .svg-stroke path{stroke:#d97706 !important}.btn-label-priority-3{color:#16a34a !important;border-color:#16a34a !important;color:#16a34a !important}.btn-label-priority-3 .svg-fill path{fill:#16a34a !important}.btn-label-priority-3 .svg-stroke path{stroke:#16a34a !important}.btn-label svg{width:1.25rem;height:1.25rem;min-width:1.25rem;min-height:1.25rem}.btn-check{position:relative;border:.2rem solid;flex:0 0 auto}.btn-check{width:2rem;height:2rem;border-radius:50%}.btn-check-1{border-color:#b91c1c !important;background-color:rgba(185,28,28,.25)}.btn-check-1:disabled{border-color:rgba(185,28,28,.7) !important;background-color:rgba(185,28,28,.15)}.btn-check-1:not(:disabled):not(.checked)::after{color:#b91c1c !important}.btn-check-1.checked{background-color:#b91c1c !important}.btn-check-2{border-color:#d97706 !important;background-color:rgba(217,119,6,.25)}.btn-check-2:disabled{border-color:rgba(217,119,6,.7) !important;background-color:rgba(217,119,6,.15)}.btn-check-2:not(:disabled):not(.checked)::after{color:#d97706 !important}.btn-check-2.checked{background-color:#d97706 !important}.btn-check-3{border-color:#16a34a !important;background-color:rgba(22,163,74,.25)}.btn-check-3:disabled{border-color:rgba(22,163,74,.7) !important;background-color:rgba(22,163,74,.15)}.btn-check-3:not(:disabled):not(.checked)::after{color:#16a34a !important}.btn-check-3.checked{background-color:#16a34a !important}.btn-check{border-color:#e4e4e7}.btn-check:disabled{border-color:rgba(228,228,231,.7)}.btn-check:hover::after{color:#e4e4e7}.btn-check.checked::after{color:#fff}.btn-check.checked{background-color:#e4e4e7}body.theme-dark .btn-check{border-color:#3f3f46}body.theme-dark .btn-check:disabled{border-color:rgba(63,63,70,.7)}body.theme-dark .btn-check:hover::after{color:#3f3f46}body.theme-dark .btn-check.checked::after{color:#27272a}body.theme-dark .btn-check.checked{background-color:#3f3f46}.btn-check:not(:disabled):hover::after,.btn-check.checked::after{content:"âœ“";font-weight:700}.btn-undo{font-size:1rem;font-weight:700;color:#3b82f6}body.theme-dark .btn-undo{color:#3b82f6}.btn-sidebar{display:flex;align-items:center;font-size:1rem;width:100%;border-radius:.5rem}.btn-sidebar.active,.btn-sidebar:active{background-color:#d4d4d8}body.theme-dark .btn-sidebar.active,body.theme-dark .btn-sidebar:active{background-color:#27272a}.btn-sidebar-l{gap:.5rem;padding:.375rem}.btn-sidebar-s{gap:.75rem;padding:.25rem .375rem}hr{width:100%;height:2px;border:none;margin:1.5rem 0;background-color:#e4e4e7}body.theme-dark hr{background-color:#3f3f46}.dialog{margin:auto;border:none;border-radius:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);width:min(600px,100%);transition:display .3s allow-discrete;background-color:#fff}body.theme-dark .dialog{background-color:#27272a}.dialog[open]{animation:open-dialog .3s ease}.dialog:not([open]){display:none;animation:close-dialog .3s ease}.dialog-s{padding:1.75rem;width:min(560px,100%)}.dialog-l{padding:2rem}.dialog-add-edit .auto-grow{margin-top:1rem}.dialog-add-edit .form-btns-label{margin:1.5rem 0}.dialog-show-task{display:flex;align-items:start;gap:1.5rem}.dialog-show-task .dialog-task-title,.dialog-show-task .form-input-title{font-size:1.25rem;font-weight:700}.dialog-show-task .dialog-task-description,.dialog-show-task .dialog-input-description{font-size:1rem}.dialog-task-info-container{flex:1}.dialog-task-title{color:#18181b}body.theme-dark .dialog-task-title{color:#f4f4f5}.dialog-task-title.checked{text-decoration:line-through}.dialog-task-description{color:#27272a}body.theme-dark .dialog-task-description{color:#e4e4e7}.dialog::backdrop{background-color:rgba(0,0,0,.6)}@keyframes open-dialog{from{transform:scale(0);opacity:0}to{transform:scale(1);opacity:1}}@keyframes close-dialog{from{transform:scale(1);opacity:1}to{transform:scale(0);opacity:0}}.form{position:relative}.form-btns-func{display:flex;justify-content:end;gap:1rem}.form-btns-label{display:flex;align-items:center;gap:1rem;flex-wrap:wrap}.form-title{font-size:1.5rem;font-weight:500;color:#18181b}body.theme-dark .form-title{color:#f4f4f5}.form-input{font-size:1.5rem;font-weight:500}.form-input-auto-delete-number{border:1px solid #a1a1aa !important;border-radius:4px;font-size:1.15rem;margin:1rem 0;width:fit-content !important;overflow:hidden;padding:.5rem}.form-input-auto-delete-number::-webkit-inner-spin-button,.form-input-auto-delete-number::-webkit-outer-spin-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:0}.form-input-auto-delete-unit{font-size:1.15rem;width:max-content !important;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:rgba(0,0,0,0);border:none;color:#18181b}body.theme-dark .form-input-auto-delete-unit{color:#f4f4f5}.form-input-unit-option{font-size:.75rem;text-align:center;font-family:inherit;font-weight:bold;color:#18181b;background-color:#fff}body.theme-dark .form-input-unit-option{color:#f4f4f5;background-color:#27272a}.form-error{color:#b91c1c}.form-color-text-container{display:flex;align-items:center;gap:1rem}.form-task-info{padding:.5rem;border-radius:.5rem;margin-bottom:1rem;border:2px solid #e4e4e7}body.theme-dark .form-task-info{border:2px solid #3f3f46}.form-popup{position:fixed;display:flex;flex-direction:column;list-style:none;border-radius:1rem;padding:1rem;gap:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);background-color:#fff}body.theme-dark .form-popup{background-color:#27272a}.form-popup-color{position:fixed;display:grid;grid-template-columns:repeat(4, auto)}.form-date-picker-input{position:absolute;visibility:hidden;top:0;left:0}.form-timer{display:flex;align-items:center;gap:1rem;justify-content:flex-start}.form-timer>.form-label{border:1px solid #a1a1aa !important;border-radius:4px;padding:.5rem;width:auto !important}.form-description{color:#27272a !important}body.theme-dark .form-description{color:#e4e4e7 !important}.form label{cursor:pointer}.form textarea,.form p{font-size:1rem}.form p{margin:1rem 0;font-size:.95rem;font-weight:400}.form input,.form textarea,.form p{display:block;width:100%;border:none;background:none;color:#18181b}body.theme-dark .form input,body.theme-dark .form textarea,body.theme-dark .form p{color:#f4f4f5}.form input:focus,.form textarea:focus,.form p:focus{outline:none}.form input::placeholder,.form textarea::placeholder,.form p::placeholder{color:#27272a}body.theme-dark .form input::placeholder,body.theme-dark .form textarea::placeholder,body.theme-dark .form p::placeholder{color:#e4e4e7}.svg-fill path{fill:#71717a}body.theme-dark .svg-fill path{fill:#a1a1aa}.svg-stroke path{stroke:#71717a}body.theme-dark .svg-stroke path{stroke:#a1a1aa}.task{margin-bottom:2rem}.task:last-of-type{margin-bottom:0}.task,.task-container{display:flex;gap:1rem}.task-info,.task-container{flex:1;min-width:0}.task-title{font-size:1.25rem;font-weight:400}.task-title.checked{text-decoration:line-through}.task-description{margin-top:.25rem;font-size:1rem;font-weight:300;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.task-date{display:flex;align-items:center;gap:.5rem;margin-top:.5rem;font-size:1rem}.task-date>svg{width:1rem;height:1rem;min-width:1rem;min-height:1rem}.task-date-incoming{color:#15803d !important;border-color:#15803d !important}.task-date-incoming .svg-fill path{fill:#15803d !important}.task-date-incoming .svg-stroke path{stroke:#15803d !important}.task-date-overdue{color:#b91c1c !important;border-color:#b91c1c !important}.task-date-overdue .svg-fill path{fill:#b91c1c !important}.task-date-overdue .svg-stroke path{stroke:#b91c1c !important}.task-project{display:flex;align-items:center;gap:.75rem}.task-project-title{font-size:1rem;font-weight:400}.task-project-title-empty{font-weight:300}.task-project-color{width:.75rem;height:.75rem;border-radius:50%}.task-controls{display:flex;flex-direction:column;align-items:end;gap:.5rem}.task-controls button:first-of-type{margin-right:1rem}.task-list{width:100%;list-style:none}.popup{position:fixed;padding:1rem 1.5rem;border-radius:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);font-size:1.25rem;font-weight:300;z-index:999;left:50%;bottom:2rem;min-width:max-content;transition:display .3s allow-discrete;animation:open-popup .3s forwards;background-color:#fff}body.theme-dark .popup{background-color:#27272a}.popup.hidden{animation:close-popup .3s forwards}.popup-undo{display:flex;align-items:center;gap:1rem}@keyframes open-popup{from{opacity:0;transform:translate(-50%, 200%)}to{opacity:1;transform:translate(-50%, 0)}}@keyframes close-popup{from{opacity:1;transform:translate(-50%, 0)}to{opacity:0;transform:translate(-50%, 200%)}}.project-color{display:block}.project-color-s{width:.75rem;height:.75rem;border-radius:50%}.project-color-m{width:1.5rem;height:1.5rem;border-radius:50%}.empty-state{width:min(260px,100%);margin:0 auto;text-align:center}.empty-state-title{font-size:1.5rem;margin-bottom:.5rem}body{color:#18181b;background-color:#fff}body.theme-dark{color:#f4f4f5;background-color:#27272a}.container{display:flex;flex-direction:row-reverse;min-height:100vh}.sidebar{width:256px;min-height:100vh;padding:1rem;transition:transform .3s ease-in-out;transform:translateX(-100%);background-color:#e4e4e7;border-right:1px solid #d4d4d8}body.theme-dark .sidebar{background-color:#3f3f46;border-right:1px solid #18181b}@media screen and (max-width: 580px){.sidebar{position:fixed;top:0;left:0;z-index:11}}.sidebar-container{position:fixed;top:0;left:0}.sidebar-bg{display:none;position:fixed;top:0;left:0;min-width:100vw;min-height:100vh;background-color:rgba(0,0,0,.6);z-index:10}@media screen and (max-width: 580px){.sidebar-bg{display:block}}.sidebar-content{position:sticky;top:1rem;display:flex;flex-direction:column;gap:4rem}.sidebar-header{display:flex;align-items:center;gap:.75rem}.sidebar-header>.btn:first-of-type{margin-left:auto}.sidebar-title{font-size:1.25rem;font-weight:700;text-decoration:none;color:#3b82f6}body.theme-dark .sidebar-title{color:#3b82f6}.sidebar-projects-header{display:flex;justify-content:space-between}.sidebar-projects-title{font-size:1.125rem;font-weight:700}.sidebar-nav-list{display:flex;flex-direction:column;list-style:none}.sidebar-nav-list-main{gap:.75rem}.sidebar-nav-list-projects{margin-top:1.5rem;gap:1rem}.main{flex:1;min-width:0;max-height:100vh;overflow:auto}.main>button{position:fixed;z-index:10;left:50%;transform:translateX(-50%);bottom:5%}.main-title{font-size:3rem;font-weight:700}.main-title-container{display:flex;align-items:center;gap:1.5rem}.main-title-project{width:1.5rem;height:1.5rem;border-radius:50%}.main-header{display:flex;margin:1rem 2rem;height:1.5rem;gap:1rem;position:fixed}.main-header button{position:relative;z-index:10}.main-content{display:flex;flex-direction:column;align-items:start;gap:3rem;margin-top:4rem;margin-bottom:4rem;padding:0 2rem;width:100%;max-width:900px;max-height:100vh;overflow:auto;position:fixed;left:50%;transform:translateX(-50%)}.main-content::-webkit-scrollbar{display:none}.main::-webkit-scrollbar{width:10px;height:10px}.main::-webkit-scrollbar-track{background:#f1f1f1}.main::-webkit-scrollbar-thumb{background:#888}.main::-webkit-scrollbar-thumb:hover{background:#555}.sidebar-open .main-content{transform:translateX(-35%)}.sidebar-open .btn-timer,.sidebar-open .btn-project-edit,.sidebar-open .btn-delete{margin-top:.2rem}.sidebar-open>button{transform:translateX(40%)}@media screen and (max-width: 580px){.sidebar-open>button{display:none !important}}*{transition:color,background-color .3s ease,transform .3s ease}',"",{version:3,sources:["webpack://./src/scss/index.scss","webpack://./src/scss/base/_reset.scss","webpack://./src/scss/base/_typography.scss","webpack://./src/scss/base/_utility.scss","webpack://./src/scss/components/_buttons.scss","webpack://./src/scss/abstracts/_themes.scss","webpack://./src/scss/abstracts/_priorities.scss","webpack://./src/scss/abstracts/_mixins.scss","webpack://./src/scss/components/_breaks.scss","webpack://./src/scss/components/_dialogs.scss","webpack://./src/scss/components/_forms.scss","webpack://./src/scss/components/_svg.scss","webpack://./src/scss/components/_tasks.scss","webpack://./src/scss/components/_popups.scss","webpack://./src/scss/components/_project.scss","webpack://./src/scss/components/_empty-state.scss","webpack://./src/scss/layout/_body.scss","webpack://./src/scss/layout/_container.scss","webpack://./src/scss/layout/_sidebar.scss","webpack://./src/scss/layout/_main.scss"],names:[],mappings:"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",sourcesContent:['html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,main,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section{display:block}*[hidden]{display:none}body{line-height:1}menu,ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}*,*::before,*::after{box-sizing:border-box}*{margin:0;padding:0}img,picture,video,canvas,svg{display:block;max-width:100%}p,h1,h2,h3,h4,h5,h6{overflow-wrap:break-word;hyphens:auto}button,[type=button],[type=reset],[type=submit]{appearance:button;-webkit-appearance:button}::-moz-focus-inner{border-style:none;padding:0}body{font-family:system-ui,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";line-height:1.5;-webkit-font-smoothing:antialiased;-webkit-text-size-adjust:100%}input,button,textarea,select,p{font:inherit;font-size:1rem}.hidden{display:none !important}.auto-grow{display:grid}.auto-grow::after{content:attr(data-value) " ";white-space:pre-wrap;visibility:hidden}.auto-grow::after,.auto-grow>textarea,.auto-grow>p{grid-area:1/1/2/2}.auto-grow>textarea,.auto-grow>p{resize:none;overflow:hidden}*{transition:color,background-color .3s ease}.btn{cursor:pointer;border:none;color:inherit;background:none}.btn-icon svg{width:1.5rem;height:1.5rem;min-width:1.5rem;min-height:1.5rem}.btn-add-task{display:flex;align-items:center;font-weight:700;color:#3b82f6}body.theme-dark .btn-add-task{color:#3b82f6}.btn-add-task-l{gap:.75rem;font-size:1.5rem}.btn-add-task-l>svg{width:2rem;height:2rem;min-width:2rem;min-height:2rem}.btn-project-edit{margin-left:auto}.btn-func{border-radius:.5rem;padding:.5rem 1rem;font-size:1rem}.btn-func-primary{color:#fff;background-color:#3b82f6}body.theme-dark .btn-func-primary{color:#fff;background-color:#3b82f6}.btn-func-primary:disabled{color:#a1a1aa;background-color:#e4e4e7}body.theme-dark .btn-func-primary:disabled{color:#18181b;background-color:#52525b}.btn-func-secondary{color:#18181b;background-color:#e4e4e7}body.theme-dark .btn-func-secondary{color:#f4f4f5;background-color:#3f3f46}.btn-select{display:flex;align-items:center;gap:.8rem}.btn-select{color:#18181b}body.theme-dark .btn-select{color:#f4f4f5}.btn-select-priority-1{color:#b91c1c !important}.btn-select-priority-1 .svg-fill path{fill:#b91c1c !important}.btn-select-priority-1 .svg-stroke path{stroke:#b91c1c !important}.btn-select-priority-2{color:#d97706 !important}.btn-select-priority-2 .svg-fill path{fill:#d97706 !important}.btn-select-priority-2 .svg-stroke path{stroke:#d97706 !important}.btn-select-priority-3{color:#16a34a !important}.btn-select-priority-3 .svg-fill path{fill:#16a34a !important}.btn-select-priority-3 .svg-stroke path{stroke:#16a34a !important}.btn-label{position:relative;display:flex;align-items:center;padding:.25rem .5rem;border-radius:.25rem;gap:.5rem;margin:0 !important;color:#18181b;border:1px solid #71717a}body.theme-dark .btn-label{color:#f4f4f5;border:1px solid #a1a1aa}.btn-label-priority-1{color:#b91c1c !important;border-color:#b91c1c !important;color:#b91c1c !important}.btn-label-priority-1 .svg-fill path{fill:#b91c1c !important}.btn-label-priority-1 .svg-stroke path{stroke:#b91c1c !important}.btn-label-priority-2{color:#d97706 !important;border-color:#d97706 !important;color:#d97706 !important}.btn-label-priority-2 .svg-fill path{fill:#d97706 !important}.btn-label-priority-2 .svg-stroke path{stroke:#d97706 !important}.btn-label-priority-3{color:#16a34a !important;border-color:#16a34a !important;color:#16a34a !important}.btn-label-priority-3 .svg-fill path{fill:#16a34a !important}.btn-label-priority-3 .svg-stroke path{stroke:#16a34a !important}.btn-label svg{width:1.25rem;height:1.25rem;min-width:1.25rem;min-height:1.25rem}.btn-check{position:relative;border:.2rem solid;flex:0 0 auto}.btn-check{width:2rem;height:2rem;border-radius:50%}.btn-check-1{border-color:#b91c1c !important;background-color:rgba(185,28,28,.25)}.btn-check-1:disabled{border-color:rgba(185,28,28,.7) !important;background-color:rgba(185,28,28,.15)}.btn-check-1:not(:disabled):not(.checked)::after{color:#b91c1c !important}.btn-check-1.checked{background-color:#b91c1c !important}.btn-check-2{border-color:#d97706 !important;background-color:rgba(217,119,6,.25)}.btn-check-2:disabled{border-color:rgba(217,119,6,.7) !important;background-color:rgba(217,119,6,.15)}.btn-check-2:not(:disabled):not(.checked)::after{color:#d97706 !important}.btn-check-2.checked{background-color:#d97706 !important}.btn-check-3{border-color:#16a34a !important;background-color:rgba(22,163,74,.25)}.btn-check-3:disabled{border-color:rgba(22,163,74,.7) !important;background-color:rgba(22,163,74,.15)}.btn-check-3:not(:disabled):not(.checked)::after{color:#16a34a !important}.btn-check-3.checked{background-color:#16a34a !important}.btn-check{border-color:#e4e4e7}.btn-check:disabled{border-color:rgba(228,228,231,.7)}.btn-check:hover::after{color:#e4e4e7}.btn-check.checked::after{color:#fff}.btn-check.checked{background-color:#e4e4e7}body.theme-dark .btn-check{border-color:#3f3f46}body.theme-dark .btn-check:disabled{border-color:rgba(63,63,70,.7)}body.theme-dark .btn-check:hover::after{color:#3f3f46}body.theme-dark .btn-check.checked::after{color:#27272a}body.theme-dark .btn-check.checked{background-color:#3f3f46}.btn-check:not(:disabled):hover::after,.btn-check.checked::after{content:"âœ“";font-weight:700}.btn-undo{font-size:1rem;font-weight:700;color:#3b82f6}body.theme-dark .btn-undo{color:#3b82f6}.btn-sidebar{display:flex;align-items:center;font-size:1rem;width:100%;border-radius:.5rem}.btn-sidebar.active,.btn-sidebar:active{background-color:#d4d4d8}body.theme-dark .btn-sidebar.active,body.theme-dark .btn-sidebar:active{background-color:#27272a}.btn-sidebar-l{gap:.5rem;padding:.375rem}.btn-sidebar-s{gap:.75rem;padding:.25rem .375rem}hr{width:100%;height:2px;border:none;margin:1.5rem 0;background-color:#e4e4e7}body.theme-dark hr{background-color:#3f3f46}.dialog{margin:auto;border:none;border-radius:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);width:min(600px,100%);transition:display .3s allow-discrete;background-color:#fff}body.theme-dark .dialog{background-color:#27272a}.dialog[open]{animation:open-dialog .3s ease}.dialog:not([open]){display:none;animation:close-dialog .3s ease}.dialog-s{padding:1.75rem;width:min(560px,100%)}.dialog-l{padding:2rem}.dialog-add-edit .auto-grow{margin-top:1rem}.dialog-add-edit .form-btns-label{margin:1.5rem 0}.dialog-show-task{display:flex;align-items:start;gap:1.5rem}.dialog-show-task .dialog-task-title,.dialog-show-task .form-input-title{font-size:1.25rem;font-weight:700}.dialog-show-task .dialog-task-description,.dialog-show-task .dialog-input-description{font-size:1rem}.dialog-task-info-container{flex:1}.dialog-task-title{color:#18181b}body.theme-dark .dialog-task-title{color:#f4f4f5}.dialog-task-title.checked{text-decoration:line-through}.dialog-task-description{color:#27272a}body.theme-dark .dialog-task-description{color:#e4e4e7}.dialog::backdrop{background-color:rgba(0,0,0,.6)}@keyframes open-dialog{from{transform:scale(0);opacity:0}to{transform:scale(1);opacity:1}}@keyframes close-dialog{from{transform:scale(1);opacity:1}to{transform:scale(0);opacity:0}}.form{position:relative}.form-btns-func{display:flex;justify-content:end;gap:1rem}.form-btns-label{display:flex;align-items:center;gap:1rem;flex-wrap:wrap}.form-title{font-size:1.5rem;font-weight:500;color:#18181b}body.theme-dark .form-title{color:#f4f4f5}.form-input{font-size:1.5rem;font-weight:500}.form-input-auto-delete-number{border:1px solid #a1a1aa !important;border-radius:4px;font-size:1.15rem;margin:1rem 0;width:fit-content !important;overflow:hidden;padding:.5rem}.form-input-auto-delete-number::-webkit-inner-spin-button,.form-input-auto-delete-number::-webkit-outer-spin-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:0}.form-input-auto-delete-unit{font-size:1.15rem;width:max-content !important;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:rgba(0,0,0,0);border:none;color:#18181b}body.theme-dark .form-input-auto-delete-unit{color:#f4f4f5}.form-input-unit-option{font-size:.75rem;text-align:center;font-family:inherit;font-weight:bold;color:#18181b;background-color:#fff}body.theme-dark .form-input-unit-option{color:#f4f4f5;background-color:#27272a}.form-error{color:#b91c1c}.form-color-text-container{display:flex;align-items:center;gap:1rem}.form-task-info{padding:.5rem;border-radius:.5rem;margin-bottom:1rem;border:2px solid #e4e4e7}body.theme-dark .form-task-info{border:2px solid #3f3f46}.form-popup{position:fixed;display:flex;flex-direction:column;list-style:none;border-radius:1rem;padding:1rem;gap:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);background-color:#fff}body.theme-dark .form-popup{background-color:#27272a}.form-popup-color{position:fixed;display:grid;grid-template-columns:repeat(4, auto)}.form-date-picker-input{position:absolute;visibility:hidden;top:0;left:0}.form-timer{display:flex;align-items:center;gap:1rem;justify-content:flex-start}.form-timer>.form-label{border:1px solid #a1a1aa !important;border-radius:4px;padding:.5rem;width:auto !important}.form-description{color:#27272a !important}body.theme-dark .form-description{color:#e4e4e7 !important}.form label{cursor:pointer}.form textarea,.form p{font-size:1rem}.form p{margin:1rem 0;font-size:.95rem;font-weight:400}.form input,.form textarea,.form p{display:block;width:100%;border:none;background:none;color:#18181b}body.theme-dark .form input,body.theme-dark .form textarea,body.theme-dark .form p{color:#f4f4f5}.form input:focus,.form textarea:focus,.form p:focus{outline:none}.form input::placeholder,.form textarea::placeholder,.form p::placeholder{color:#27272a}body.theme-dark .form input::placeholder,body.theme-dark .form textarea::placeholder,body.theme-dark .form p::placeholder{color:#e4e4e7}.svg-fill path{fill:#71717a}body.theme-dark .svg-fill path{fill:#a1a1aa}.svg-stroke path{stroke:#71717a}body.theme-dark .svg-stroke path{stroke:#a1a1aa}.task{margin-bottom:2rem}.task:last-of-type{margin-bottom:0}.task,.task-container{display:flex;gap:1rem}.task-info,.task-container{flex:1;min-width:0}.task-title{font-size:1.25rem;font-weight:400}.task-title.checked{text-decoration:line-through}.task-description{margin-top:.25rem;font-size:1rem;font-weight:300;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.task-date{display:flex;align-items:center;gap:.5rem;margin-top:.5rem;font-size:1rem}.task-date>svg{width:1rem;height:1rem;min-width:1rem;min-height:1rem}.task-date-incoming{color:#15803d !important;border-color:#15803d !important}.task-date-incoming .svg-fill path{fill:#15803d !important}.task-date-incoming .svg-stroke path{stroke:#15803d !important}.task-date-overdue{color:#b91c1c !important;border-color:#b91c1c !important}.task-date-overdue .svg-fill path{fill:#b91c1c !important}.task-date-overdue .svg-stroke path{stroke:#b91c1c !important}.task-project{display:flex;align-items:center;gap:.75rem}.task-project-title{font-size:1rem;font-weight:400}.task-project-title-empty{font-weight:300}.task-project-color{width:.75rem;height:.75rem;border-radius:50%}.task-controls{display:flex;flex-direction:column;align-items:end;gap:.5rem}.task-controls button:first-of-type{margin-right:1rem}.task-list{width:100%;list-style:none}.popup{position:fixed;padding:1rem 1.5rem;border-radius:1rem;box-shadow:0 2px 8px 0 rgba(0,0,0,.25);font-size:1.25rem;font-weight:300;z-index:999;left:50%;bottom:2rem;min-width:max-content;transition:display .3s allow-discrete;animation:open-popup .3s forwards;background-color:#fff}body.theme-dark .popup{background-color:#27272a}.popup.hidden{animation:close-popup .3s forwards}.popup-undo{display:flex;align-items:center;gap:1rem}@keyframes open-popup{from{opacity:0;transform:translate(-50%, 200%)}to{opacity:1;transform:translate(-50%, 0)}}@keyframes close-popup{from{opacity:1;transform:translate(-50%, 0)}to{opacity:0;transform:translate(-50%, 200%)}}.project-color{display:block}.project-color-s{width:.75rem;height:.75rem;border-radius:50%}.project-color-m{width:1.5rem;height:1.5rem;border-radius:50%}.empty-state{width:min(260px,100%);margin:0 auto;text-align:center}.empty-state-title{font-size:1.5rem;margin-bottom:.5rem}body{color:#18181b;background-color:#fff}body.theme-dark{color:#f4f4f5;background-color:#27272a}.container{display:flex;flex-direction:row-reverse;min-height:100vh}.sidebar{width:256px;min-height:100vh;padding:1rem;transition:transform .3s ease-in-out;transform:translateX(-100%);background-color:#e4e4e7;border-right:1px solid #d4d4d8}body.theme-dark .sidebar{background-color:#3f3f46;border-right:1px solid #18181b}@media screen and (max-width: 580px){.sidebar{position:fixed;top:0;left:0;z-index:11}}.sidebar-container{position:fixed;top:0;left:0}.sidebar-bg{display:none;position:fixed;top:0;left:0;min-width:100vw;min-height:100vh;background-color:rgba(0,0,0,.6);z-index:10}@media screen and (max-width: 580px){.sidebar-bg{display:block}}.sidebar-content{position:sticky;top:1rem;display:flex;flex-direction:column;gap:4rem}.sidebar-header{display:flex;align-items:center;gap:.75rem}.sidebar-header>.btn:first-of-type{margin-left:auto}.sidebar-title{font-size:1.25rem;font-weight:700;text-decoration:none;color:#3b82f6}body.theme-dark .sidebar-title{color:#3b82f6}.sidebar-projects-header{display:flex;justify-content:space-between}.sidebar-projects-title{font-size:1.125rem;font-weight:700}.sidebar-nav-list{display:flex;flex-direction:column;list-style:none}.sidebar-nav-list-main{gap:.75rem}.sidebar-nav-list-projects{margin-top:1.5rem;gap:1rem}.main{flex:1;min-width:0;max-height:100vh;overflow:auto}.main>button{position:fixed;z-index:10;left:50%;transform:translateX(-50%);bottom:5%}.main-title{font-size:3rem;font-weight:700}.main-title-container{display:flex;align-items:center;gap:1.5rem}.main-title-project{width:1.5rem;height:1.5rem;border-radius:50%}.main-header{display:flex;margin:1rem 2rem;height:1.5rem;gap:1rem;position:fixed}.main-header button{position:relative;z-index:10}.main-content{display:flex;flex-direction:column;align-items:start;gap:3rem;margin-top:4rem;margin-bottom:4rem;padding:0 2rem;width:100%;max-width:900px;max-height:100vh;overflow:auto;position:fixed;left:50%;transform:translateX(-50%)}.main-content::-webkit-scrollbar{display:none}.main::-webkit-scrollbar{width:10px;height:10px}.main::-webkit-scrollbar-track{background:#f1f1f1}.main::-webkit-scrollbar-thumb{background:#888}.main::-webkit-scrollbar-thumb:hover{background:#555}.sidebar-open .main-content{transform:translateX(-35%)}.sidebar-open .btn-timer,.sidebar-open .btn-project-edit,.sidebar-open .btn-delete{margin-top:.2rem}.sidebar-open>button{transform:translateX(40%)}@media screen and (max-width: 580px){.sidebar-open>button{display:none !important}}*{transition:color,background-color .3s ease,transform .3s ease}','/* http://meyerweb.com/eric/tools/css/reset/\r\n   v5.0.2 | 20191019\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nmenu, ol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: \'\';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n/*\r\n  Use a more intuitive box-sizing model\r\n*/\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}\r\n\r\n/*\r\n  Remove default margin and padding\r\n*/\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/*\r\n  Set media elements defaults to block\r\n*/\r\n\r\nimg,\r\npicture,\r\nvideo,\r\ncanvas,\r\nsvg {\r\n  display: block;\r\n  max-width: 100%;\r\n}\r\n\r\n/*\r\n  Add word wrapping for long words to avoid overflowing\r\n*/\r\n\r\np,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  overflow-wrap: break-word;\r\n  hyphens: auto;\r\n}\r\n\r\n/*\r\n  Correct the inability to style clickable types in iOS and Safari\r\n*/\r\n\r\nbutton,\r\n[type="button"],\r\n[type="reset"],\r\n[type="submit"] {\r\n  appearance: button;\r\n  -webkit-appearance: button;\r\n}\r\n\r\n/*\r\n  Remove the inner border and padding in Firefox\r\n*/\r\n\r\n::-moz-focus-inner {\r\n  border-style: none;\r\n  padding: 0;\r\n}','$font-stack: (\r\n    system-ui,\r\n    "Segoe UI",\r\n    Roboto,\r\n    Helvetica,\r\n    Arial,\r\n    sans-serif,\r\n    "Apple Color Emoji",\r\n    "Segoe UI Emoji",\r\n    "Segoe UI Symbol"\r\n);\r\n\r\nbody {\r\n    font-family: $font-stack;\r\n    line-height: 1.5;\r\n    -webkit-font-smoothing: antialiased;\r\n    -webkit-text-size-adjust: 100%;\r\n}\r\n\r\ninput, button, textarea, select, p {\r\n    font: inherit;\r\n    font-size: 1rem;\r\n}','.hidden {\r\n    display: none !important;\r\n}\r\n  \r\n.auto-grow {\r\n    display: grid;\r\n  \r\n    &::after {\r\n        content: attr(data-value) " ";\r\n        white-space: pre-wrap;\r\n        visibility: hidden;\r\n    }\r\n  \r\n    &::after, & > textarea, & > p {\r\n        grid-area: 1 / 1 / 2 / 2;\r\n    }\r\n  \r\n    > textarea, > p {\r\n        resize: none;\r\n        overflow: hidden;\r\n    }\r\n}\r\n  \r\n* {\r\n    transition: color, background-color 0.3s ease;\r\n}','@use "../abstracts" as *;\r\n\r\n.btn {\r\n    cursor: pointer;\r\n    border: none;\r\n    color: inherit;\r\n    background: none;\r\n\r\n    &-icon {\r\n        svg {\r\n            @include min-size(1.5rem);\r\n        }\r\n    }\r\n\r\n    &-add-task {\r\n        display: flex;\r\n        align-items: center;\r\n        font-weight: 700;\r\n\r\n        @include themify {\r\n            color: themed("main");\r\n        }\r\n\r\n        &-l {\r\n            gap: 0.75rem;\r\n            font-size: 1.5rem;\r\n\r\n            > svg {\r\n                @include min-size(2rem);\r\n            }\r\n        }\r\n    }\r\n\r\n    &-project-edit {\r\n        margin-left: auto;\r\n    }\r\n\r\n    &-func {\r\n        border-radius: 0.5rem;\r\n        padding: 0.5rem 1rem;\r\n        font-size: 1rem;\r\n\r\n        &-primary {\r\n            @include themify {\r\n                color: #fff;\r\n                background-color: themed("main");\r\n            }\r\n\r\n            &:disabled {\r\n                @include themify {\r\n                    color: themed("text-disabled");\r\n                    background-color: themed("disabled");\r\n                }\r\n            }\r\n        }\r\n\r\n        &-secondary {\r\n            @include themify {\r\n                color: themed("text-main");\r\n                background-color: themed("accent");\r\n            }\r\n        }\r\n    }\r\n\r\n    &-select {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.8rem;\r\n\r\n        & {\r\n            @include themify {\r\n                color: themed("text-main");\r\n            }\r\n        }\r\n\r\n        &-priority {\r\n            @include priority-color-fill();\r\n        }\r\n    }\r\n\r\n    &-label {\r\n        position: relative;\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.25rem 0.5rem;\r\n        border-radius: 0.25rem;\r\n        gap: 0.5rem;\r\n        margin: 0 !important;\r\n\r\n        @include themify {\r\n            color: themed("text-main");\r\n            border: 1px solid themed("icon");\r\n        }\r\n\r\n        &-priority {\r\n            @include priority-color-fill {\r\n                border-color: priority-colored() !important;\r\n                color: priority-colored() !important;\r\n            }\r\n        }\r\n\r\n        svg {\r\n            @include min-size(1.25rem);\r\n        }\r\n    }\r\n\r\n    &-check {\r\n        position: relative;\r\n        border: 0.2rem solid;\r\n        flex: 0 0 auto;\r\n\r\n        & {\r\n            @include circle(2rem);\r\n            @include priority-color {\r\n                border-color: priority-colored() !important;\r\n                background-color: to-rgba(priority-colored(), 0.25);\r\n\r\n                &:disabled {\r\n                    border-color: to-rgba(priority-colored(), 0.7) !important;\r\n                    background-color: to-rgba(priority-colored(), 0.15);\r\n                }\r\n\r\n                &:not(:disabled):not(.checked)::after {\r\n                    color: priority-colored() !important;\r\n                }\r\n\r\n                &.checked {\r\n                    background-color: priority-colored() !important;\r\n                }\r\n            }\r\n        }\r\n\r\n        & {\r\n            @include themify {\r\n                border-color: themed("accent");\r\n\r\n                &:disabled {\r\n                    border-color: to-rgba(themed("accent"), 0.7);\r\n                }\r\n\r\n                &:hover::after {\r\n                    color: themed("accent");\r\n                }\r\n\r\n                &.checked::after {\r\n                    color: themed("background");\r\n                }\r\n\r\n                &.checked {\r\n                    background-color: themed("accent");\r\n                }\r\n            }\r\n        }\r\n\r\n        &:not(:disabled):hover::after, &.checked::after {\r\n            content: "âœ“";\r\n            font-weight: 700;\r\n        }\r\n    }\r\n\r\n    &-undo {\r\n        font-size: 1rem;\r\n        font-weight: 700;\r\n\r\n        @include themify {\r\n            color: themed("main");\r\n        }\r\n    }\r\n\r\n    &-sidebar {\r\n        display: flex;\r\n        align-items: center;\r\n        font-size: 1rem;\r\n        width: 100%;\r\n        border-radius: 0.5rem;\r\n\r\n        &.active, &:active {\r\n            @include themify {\r\n                background-color: themed("accent-dark");\r\n            }\r\n        }\r\n\r\n        &-l {\r\n            gap: 0.5rem;\r\n            padding: 0.375rem;\r\n        }\r\n\r\n        &-s {\r\n            gap: 0.75rem;\r\n            padding: 0.25rem 0.375rem;\r\n        }\r\n    }\r\n}','$themes: (\r\n    light: (\r\n        background: #fff,\r\n        main: #3b82f6,\r\n        disabled: #e4e4e7,\r\n        accent: #e4e4e7,\r\n        accent-dark: #d4d4d8,\r\n        sidebar-border: #d4d4d8,\r\n        text-main: #18181b,\r\n        text-secondary: #27272a,\r\n        text-disabled: #a1a1aa,\r\n        icon: #71717a,\r\n    ),\r\n    dark: (\r\n        background: #27272a,\r\n        main: #3b82f6,\r\n        disabled: #52525b,\r\n        accent: #3f3f46,\r\n        accent-dark: #27272a,\r\n        sidebar-border: #18181b,\r\n        text-main: #f4f4f5,\r\n        text-secondary: #e4e4e7,\r\n        text-disabled: #18181b,\r\n        icon: #a1a1aa,\r\n    ),\r\n);\r\n\r\n@function themed($property) {\r\n    @return map-get($theme-map, $property);\r\n}\r\n\r\n@mixin themify ($is-body: false) {\r\n    @each $theme, $map in $themes {\r\n        $theme-map: () !global;\r\n        @each $key, $submap in $map {\r\n            $value: map-get(map-get($themes, $theme), "#{$key}");\r\n            $theme-map: map-merge($theme-map, ($key: $value)) !global;\r\n        }\r\n        @if $theme == "light" {\r\n            @content;\r\n        } \r\n        @else if $is-body {\r\n            &.theme-#{$theme} {\r\n                @content;\r\n            }\r\n        } \r\n        @else {\r\n            body.theme-#{$theme} & {\r\n                @content;\r\n            }\r\n        }\r\n        $theme-map: null !global;\r\n    }\r\n}',"$colors: (\r\n    1: #b91c1c,\r\n    2: #d97706,\r\n    3: #16a34a\r\n);\r\n\r\n@function priority-colored() {\r\n    @return $priority-color;\r\n}\r\n\r\n@mixin priority-color () {\r\n    @each $num, $color in $colors {\r\n        $priority-color: $color !global;\r\n        &-#{$num} {\r\n            @content;\r\n        }\r\n        $priority-color: null !global;\r\n    }\r\n}\r\n\r\n@mixin priority-color-fill () {\r\n    @include priority-color {\r\n        color: priority-colored() !important;\r\n        @content;\r\n        .svg-fill path {\r\n            fill: priority-colored() !important;\r\n        }\r\n        .svg-stroke path {\r\n            stroke: priority-colored() !important;\r\n        }\r\n    }\r\n}","@mixin circle ($size) {\r\n    width: $size;\r\n    height: $size;\r\n    border-radius: 50%;\r\n}\r\n\r\n@mixin min-size ($size) {\r\n    width: $size;\r\n    height: $size;\r\n    min-width: $size;\r\n    min-height: $size;\r\n}\r\n\r\n@mixin mobile-media () {\r\n    @media screen and (max-width: 580px) {\r\n        @content;\r\n    }\r\n}",'@use "../abstracts/themes" as *;\r\n\r\nhr {\r\n    width: 100%;\r\n    height: 2px;\r\n    border: none;\r\n    margin: 1.5rem 0;\r\n\r\n    @include themify {\r\n        background-color: themed("accent");\r\n    }\r\n}','@use "../abstracts/themes" as *;\r\n\r\n.dialog {\r\n    margin: auto;\r\n    border: none;\r\n    border-radius: 1rem;\r\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.25);\r\n    width: min(600px, 100%);\r\n    transition: display 0.3s allow-discrete;\r\n\r\n    @include themify {\r\n        background-color: themed("background");\r\n    }\r\n\r\n    &[open] {\r\n        animation: open-dialog 0.3s ease;\r\n    }\r\n\r\n    &:not([open]) {\r\n        display: none;\r\n        animation: close-dialog 0.3s ease;\r\n    }\r\n\r\n    &-s {\r\n        padding: 1.75rem;\r\n        width: min(560px, 100%);\r\n    }\r\n\r\n    &-l {\r\n        padding: 2rem;\r\n    }\r\n\r\n    &-add-edit {\r\n        .auto-grow {\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .form-btns-label {\r\n            margin: 1.5rem 0;\r\n        }\r\n    }\r\n\r\n    &-show-task {\r\n        display: flex;\r\n        align-items: start;\r\n        gap: 1.5rem;\r\n\r\n        .dialog-task-title, .form-input-title {\r\n            font-size: 1.25rem;\r\n            font-weight: 700;\r\n        }\r\n\r\n        .dialog-task-description, .dialog-input-description {\r\n            font-size: 1rem;\r\n        }\r\n    }\r\n\r\n    &-task {\r\n        &-info-container {\r\n            flex: 1;\r\n        }\r\n\r\n        &-title {\r\n            @include themify {\r\n                color: themed("text-main");\r\n            }\r\n\r\n            &.checked {\r\n                text-decoration: line-through;\r\n            }\r\n        }\r\n\r\n        &-description {\r\n            @include themify {\r\n                color: themed("text-secondary");\r\n            }\r\n        }\r\n    }\r\n\r\n    &::backdrop {\r\n        background-color: rgba(0, 0, 0, 0.6);\r\n    }\r\n}\r\n\r\n@keyframes open-dialog {\r\n    from {\r\n        transform: scale(0);\r\n        opacity: 0;\r\n    }\r\n\r\n    to {\r\n        transform: scale(1);\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes close-dialog {\r\n    from {\r\n        transform: scale(1);\r\n        opacity: 1;\r\n    }\r\n\r\n    to {\r\n        transform: scale(0);\r\n        opacity: 0;\r\n    }\r\n}','@use "../abstracts/themes" as *;\r\n\r\n.form {\r\n    position: relative;\r\n\r\n    &-btns {\r\n        &-func {\r\n            display: flex;\r\n            justify-content: end;\r\n            gap: 1rem;\r\n        }\r\n\r\n        &-label {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 1rem;\r\n            flex-wrap: wrap;\r\n        }\r\n    }\r\n\r\n    &-title {\r\n        font-size: 1.5rem;\r\n        font-weight: 500;\r\n\r\n        @include themify {\r\n            color: themed("text-main");\r\n        }\r\n    }\r\n\r\n    &-input {\r\n        font-size: 1.5rem;\r\n        font-weight: 500;\r\n\r\n        &-auto-delete-number {\r\n            border: 1px solid #a1a1aa !important;\r\n            border-radius: 4px;\r\n            font-size: 1.15rem;\r\n            margin: 1rem 0;\r\n            width: fit-content !important;\r\n            overflow: hidden;\r\n            padding: 0.5rem;\r\n\r\n            &::-webkit-inner-spin-button, &::-webkit-outer-spin-button {\r\n                -webkit-appearance: none;\r\n                -moz-appearance: none;\r\n                appearance: none;\r\n                margin: 0;    \r\n            }\r\n        }\r\n        &-auto-delete-unit {\r\n            font-size: 1.15rem;\r\n            width: max-content !important;\r\n            -webkit-appearance: none;\r\n            -moz-appearance: none;\r\n            appearance: none;\r\n            background: transparent;\r\n            border: none;\r\n            @include themify {\r\n                color: themed("text-main");\r\n            }\r\n        }\r\n\r\n        &-unit-option {\r\n            font-size: 0.75rem;\r\n            text-align: center;\r\n            font-family: inherit;\r\n            font-weight: bold;\r\n            @include themify {\r\n                color: themed("text-main");\r\n                background-color: themed("background");\r\n            }\r\n        }\r\n    }\r\n\r\n    &-error {\r\n        color: #b91c1c;\r\n    }\r\n\r\n    &-color-text-container {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 1rem;\r\n    }\r\n\r\n    &-task-info {\r\n        padding: 0.5rem;\r\n        border-radius: 0.5rem;\r\n        margin-bottom: 1rem;\r\n\r\n        @include themify {\r\n            border: 2px solid themed("accent");\r\n        }\r\n    }\r\n\r\n    &-popup {\r\n        position: fixed;\r\n        display: flex;\r\n        flex-direction: column;\r\n        list-style: none;\r\n        border-radius: 1rem;\r\n        padding: 1rem;\r\n        gap: 1rem;\r\n        box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.25);\r\n\r\n        @include themify {\r\n            background-color: themed("background");\r\n        }\r\n\r\n        &-color {\r\n            position: fixed;\r\n            display: grid;\r\n            grid-template-columns: repeat(4, auto);\r\n        }\r\n    }\r\n\r\n    &-date-picker-input {\r\n        position: absolute;\r\n        visibility: hidden;\r\n        top: 0;\r\n        left: 0;\r\n    }\r\n\r\n    &-timer {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 1rem;\r\n        justify-content: flex-start;\r\n\r\n        & > .form-label {\r\n            border: 1px solid #a1a1aa !important;\r\n            border-radius: 4px;\r\n            padding: 0.5rem;\r\n            width: auto !important;\r\n        }\r\n    }\r\n\r\n    &-description {\r\n        @include themify {\r\n            color: themed("text-secondary") !important;\r\n        }\r\n    }\r\n\r\n    label {\r\n        cursor: pointer;\r\n    }\r\n\r\n    textarea, p {\r\n        font-size: 1rem;\r\n    }\r\n\r\n    p {\r\n        margin: 1rem 0;\r\n        font-size: 0.95rem;\r\n        font-weight: 400;\r\n    }\r\n\r\n    input, textarea, p {\r\n        display: block;\r\n        width: 100%;\r\n        border: none;\r\n        background: none;\r\n\r\n        @include themify {\r\n            color: themed("text-main");\r\n        }\r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n\r\n        &::placeholder {\r\n            @include themify {\r\n                color: themed("text-secondary");\r\n            }\r\n        }\r\n    }\r\n}','@use "../abstracts/themes" as *;\r\n\r\n.svg {\r\n    &-fill path {\r\n        @include themify {\r\n            fill: themed("icon");\r\n        }\r\n    }\r\n\r\n    &-stroke path {\r\n        @include themify {\r\n            stroke: themed("icon");\r\n        }\r\n    }\r\n}',".task {\r\n    margin-bottom: 2rem;\r\n  \r\n    &:last-of-type {\r\n        margin-bottom: 0;\r\n    }\r\n  \r\n    &, &-container {\r\n        display: flex;\r\n        gap: 1rem;\r\n    }\r\n  \r\n    &-info, &-container {\r\n        flex: 1;\r\n        min-width: 0;\r\n    }\r\n  \r\n    &-title {\r\n        font-size: 1.25rem;\r\n        font-weight: 400;\r\n\r\n        &.checked {\r\n            text-decoration: line-through;\r\n        }\r\n    }\r\n  \r\n    &-description {\r\n        margin-top: 0.25rem;\r\n        font-size: 1rem;\r\n        font-weight: 300;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n    }\r\n  \r\n    &-date {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        margin-top: 0.5rem;\r\n        font-size: 1rem;\r\n    \r\n        > svg {\r\n            width: 1rem;\r\n            height: 1rem;\r\n    \r\n            min-width: 1rem;\r\n            min-height: 1rem;\r\n        }\r\n    \r\n        @mixin set-color($color) {\r\n            color: $color !important;\r\n            border-color: $color !important;\r\n    \r\n            .svg-fill path {\r\n            fill: $color !important;\r\n            }\r\n    \r\n            .svg-stroke path {\r\n            stroke: $color !important;\r\n            }\r\n        }\r\n    \r\n        &-incoming {\r\n            @include set-color(#15803d);\r\n        }\r\n    \r\n        &-overdue {\r\n            @include set-color(#b91c1c);\r\n        }\r\n    }\r\n  \r\n    &-project {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.75rem;\r\n    \r\n        &-title {\r\n            font-size: 1rem;\r\n            font-weight: 400;\r\n    \r\n            &-empty {\r\n            font-weight: 300;\r\n            }\r\n        }\r\n    \r\n        &-color {\r\n            width: 0.75rem;\r\n            height: 0.75rem;\r\n            border-radius: 50%;\r\n        }\r\n    }\r\n  \r\n    &-controls {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: end;\r\n        gap: 0.5rem;\r\n    \r\n        button:first-of-type {\r\n            margin-right: 1rem;\r\n        }\r\n    }\r\n  \r\n    &-list {\r\n        width: 100%;\r\n        list-style: none;\r\n    }\r\n}",'@use "../abstracts/themes" as *;\r\n\r\n.popup {\r\n    position: fixed;\r\n    padding: 1rem 1.5rem;\r\n    border-radius: 1rem;\r\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.25);\r\n    font-size: 1.25rem;\r\n    font-weight: 300;\r\n    z-index: 999;\r\n    left: 50%;\r\n    bottom: 2rem;\r\n    min-width: max-content;\r\n    transition: display 0.3s allow-discrete;\r\n    animation: open-popup 0.3s forwards;\r\n\r\n    @include themify {\r\n        background-color: themed("background");\r\n    }\r\n\r\n    &.hidden {\r\n        animation: close-popup 0.3s forwards;\r\n    }\r\n\r\n    &-undo {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 1rem;\r\n    }\r\n}\r\n\r\n@keyframes open-popup {\r\n    from {\r\n        opacity: 0;\r\n        transform: translate(-50%, 200%);\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n        transform: translate(-50%, 0);\r\n    }\r\n}\r\n\r\n@keyframes close-popup {\r\n    from {\r\n        opacity: 1;\r\n        transform: translate(-50%, 0);\r\n    }\r\n\r\n    to {\r\n        opacity: 0;\r\n        transform: translate(-50%, 200%);\r\n    }\r\n}','@use "../abstracts/mixins" as *;\r\n\r\n.project {\r\n    &-color {\r\n        display: block;\r\n\r\n        &-s {\r\n            @include circle(0.75rem);\r\n        }\r\n\r\n        &-m {\r\n            @include circle(1.5rem);\r\n        }\r\n    }\r\n}',".empty-state {\r\n    width: min(260px, 100%);\r\n    margin: 0 auto;\r\n    text-align: center;\r\n  \r\n    &-title {\r\n        font-size: 1.5rem;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n}",'@use "../abstracts/themes" as *;\r\n\r\nbody {\r\n    @include themify(true) {\r\n        color: themed("text-main");\r\n        background-color: themed("background");\r\n    }\r\n}',".container {\r\n    display: flex;\r\n    flex-direction: row-reverse;\r\n    min-height: 100vh;\r\n}",'@use "../abstracts" as *;\r\n\r\n.sidebar {\r\n    width: 256px;\r\n    min-height: 100vh;\r\n    padding: 1rem;\r\n    transition: transform 0.3s ease-in-out;\r\n    transform: translateX(-100%);\r\n\r\n    @include themify {\r\n        background-color: themed("accent");\r\n        border-right: 1px solid themed("sidebar-border");\r\n    }\r\n\r\n    @include mobile-media {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: 11;\r\n    }\r\n\r\n    &-container {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n    }\r\n\r\n    &-bg {\r\n        display: none;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        min-width: 100vw;\r\n        min-height: 100vh;\r\n        background-color: rgba(0, 0, 0, 0.6);\r\n        z-index: 10;\r\n\r\n        @include mobile-media {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    &-content {\r\n        position: sticky;\r\n        top: 1rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 4rem;\r\n    }\r\n\r\n    &-header {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.75rem;\r\n\r\n        & > .btn:first-of-type {\r\n            margin-left: auto;\r\n        }\r\n    }\r\n\r\n    &-title {\r\n        font-size: 1.25rem;\r\n        font-weight: 700;\r\n        text-decoration: none;\r\n\r\n        @include themify {\r\n            color: themed("main");\r\n        }\r\n    }\r\n\r\n    &-projects {\r\n        &-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        &-title {\r\n            font-size: 1.125rem;\r\n            font-weight: 700;\r\n        }\r\n    }\r\n\r\n    &-nav-list {\r\n        display: flex;\r\n        flex-direction: column;\r\n        list-style: none;\r\n\r\n        &-main {\r\n            gap: 0.75rem;\r\n        }\r\n\r\n        &-projects {\r\n            margin-top: 1.5rem;\r\n            gap: 1rem;\r\n        }\r\n    }\r\n}',".main {\r\n    flex: 1;\r\n    min-width: 0;\r\n\tmax-height: 100vh;\r\n\toverflow: auto;\r\n\r\n\t> button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 10;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\t\tbottom: 5%;\r\n\t}\r\n  \r\n    &-title {\r\n\t\tfont-size: 3rem;\r\n\t\tfont-weight: 700;\r\n\t\r\n\t\t&-container {\r\n\t\t\tdisplay: flex;\r\n\t\t\talign-items: center;\r\n\t\t\tgap: 1.5rem;\r\n\t\t}\r\n\t\r\n\t\t&-project {\r\n\t\t\twidth: 1.5rem;\r\n\t\t\theight: 1.5rem;\r\n\t\t\tborder-radius: 50%;\r\n\t\t}\r\n    }\r\n  \r\n    &-header {\r\n\t\tdisplay: flex;\r\n\t\tmargin: 1rem 2rem;\r\n\t\theight: 1.5rem;\r\n\t\tgap: 1rem;\r\n\t\tposition: fixed;\r\n\r\n\t\tbutton {\r\n\t\t\tposition: relative;\r\n\t\t\tz-index: 10;\r\n\t\t}\r\n    }\r\n  \r\n    &-content {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: start;\r\n\t\tgap: 3rem;\r\n\t\tmargin-top: 4rem;\r\n\t\tmargin-bottom: 4rem;\r\n\t\tpadding: 0 2rem;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 900px;\r\n\t\tmax-height: 100vh;\r\n\t\toverflow: auto;\r\n\t\tposition: fixed;\r\n\t\tleft: 50%;\r\n\t\ttransform: translateX(-50%);\r\n\r\n\t\t&::-webkit-scrollbar {\r\n\t\t\tdisplay: none;\r\n\t\t}\r\n\t}\r\n\r\n\t&::-webkit-scrollbar {\r\n        width: 10px; \r\n        height: 10px; \r\n    }\r\n\r\n    &::-webkit-scrollbar-track {\r\n        background: #f1f1f1;  \r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n        background: #888;   \r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: #555;  \r\n    }\r\n}\r\n\r\n.sidebar-open .main-content {\r\n\ttransform: translateX(-35%);\r\n}\r\n\r\n.sidebar-open .btn-timer, .sidebar-open .btn-project-edit, .sidebar-open .btn-delete {\r\n\tmargin-top: 0.2rem;\r\n}\r\n\r\n.sidebar-open > button {\r\n\ttransform: translateX(40%);\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n\t.sidebar-open > button {\r\n\t\tdisplay: none !important;\r\n\t}\r\n}\r\n\r\n* {\r\n\ttransition: color, background-color 0.3s ease, transform 0.3s ease;\r\n}"],sourceRoot:""}]);const c=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);n&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},a=[],c=0;c<t.length;c++){var s=t[c],l=n.base?s[0]+n.base:s[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var A=r(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(f);else{var p=o(f,n);n.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function o(t,e){var r=e.domAPI(e);r.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=r(i[a]);e[c].references--}for(var s=n(t,o),l=0;l<i.length;l++){var u=r(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=s}}},659:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0;var n=r(72),o=r.n(n),i=r(825),a=r.n(i),c=r(659),s=r.n(c),l=r(56),u=r.n(l),d=r(540),A=r.n(d),f=r(113),p=r.n(f),m=r(22),b={};b.styleTagTransform=p(),b.setAttributes=u(),b.insert=s().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=A();o()(m.A,b);m.A&&m.A.locals&&m.A.locals;function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function g(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function y(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?g(Object(r),!0).forEach((function(e){C(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function C(t,e,r){return(e=w(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,w(n.key),n)}}function w(t){var e=function(t,e){if("object"!=h(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=h(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==h(e)?e:e+""}function k(t,e,r){(function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")})(t,e),e.set(t,r)}function x(t,e){return t.get(B(t,e))}function j(t,e,r){return t.set(B(t,e),r),r}function B(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var O=new WeakMap,S=new WeakMap,P=new WeakMap,I=function(){return t=function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),k(this,O,void 0),k(this,S,void 0),k(this,P,void 0);var n=localStorage.getItem(e);j(O,this,e),j(S,this,0),j(P,this,n?JSON.parse(n):[]),x(P,this).forEach((function(t){var e=t.id;e>=x(S,r)&&j(S,r,e+1)}))},(e=[{key:"save",value:function(){localStorage.setItem(x(O,this),JSON.stringify(x(P,this)))}},{key:"add",value:function(t){var e;x(P,this).push(y(y({},t),{},{id:t.id||x(S,this)})),j(S,this,(e=x(S,this),++e)),this.save()}},{key:"update",value:function(t,e){var r=x(P,this).findIndex((function(e){return e.id==t}));-1!==r&&(x(P,this)[r]=e,this.save())}},{key:"delete",value:function(t){var e=x(P,this).findIndex((function(e){return e.id==t}));-1!==e&&(x(P,this).splice(e,1),this.save())}},{key:"filter",value:function(t){j(P,this,x(P,this).filter(t)),this.save()}},{key:"getList",value:function(){return x(P,this)}},{key:"getCurrentId",value:function(){return x(S,this)}}])&&v(t.prototype,e),r&&v(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();Math.pow(10,8);const E=6048e5,L=Symbol.for("constructDateFrom");function M(t,e){return"function"==typeof t?t(e):t&&"object"==typeof t&&L in t?t[L](e):t instanceof Date?new t.constructor(e):new Date(e)}function D(t,e){return M(e||t,t)}function T(t,e){return+D(t)<+D(e)}function z(t,e){const r=D(t,e?.in);return r.setHours(0,0,0,0),r}function q(t){return z(Date.now(),t)}function H(t){return M(t,Date.now())}function G(t,...e){const r=M.bind(null,t||e.find((t=>"object"==typeof t)));return e.map(r)}function J(t,e,r){const[n,o]=G(r?.in,t,e);return+z(n)==+z(o)}function W(t,e){return J(M(e?.in||t,t),H(e?.in||t))}function R(t,e,r){const n=D(t,r?.in);return isNaN(e)?M(r?.in||t,NaN):e?(n.setDate(n.getDate()+e),n):n}function N(t,e){return J(t,R(H(e?.in||t),1),e)}function Y(t,e,r){return R(t,-e,r)}function _(t,e){return J(M(e?.in||t,t),Y(H(e?.in||t),1))}const V={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function F(t){return(e={})=>{const r=e.width?String(e.width):t.defaultWidth;return t.formats[r]||t.formats[t.defaultWidth]}}const Q={date:F({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:F({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:F({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},$={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function U(t){return(e,r)=>{let n;if("formatting"===(r?.context?String(r.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=r?.width?String(r.width):e;n=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=r?.width?String(r.width):t.defaultWidth;n=t.values[o]||t.values[e]}return n[t.argumentCallback?t.argumentCallback(e):e]}}const Z={ordinalNumber:(t,e)=>{const r=Number(t),n=r%100;if(n>20||n<10)switch(n%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:U({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:U({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:U({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:U({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:U({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function X(t){return(e,r={})=>{const n=r.width,o=n&&t.matchPatterns[n]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;const a=i[0],c=n&&t.parsePatterns[n]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?function(t,e){for(let r=0;r<t.length;r++)if(e(t[r]))return r;return}(c,(t=>t.test(a))):function(t,e){for(const r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&e(t[r]))return r;return}(c,(t=>t.test(a)));let l;l=t.valueCallback?t.valueCallback(s):s,l=r.valueCallback?r.valueCallback(l):l;return{value:l,rest:e.slice(a.length)}}}const K={ordinalNumber:(tt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const r=t.match(tt.matchPattern);if(!r)return null;const n=r[0],o=t.match(tt.parsePattern);if(!o)return null;let i=tt.valueCallback?tt.valueCallback(o[0]):o[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(n.length)}}),era:X({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:X({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:X({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:X({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:X({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var tt;const et={code:"en-US",formatDistance:(t,e,r)=>{let n;const o=V[t];return n="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),r?.addSuffix?r.comparison&&r.comparison>0?"in "+n:n+" ago":n},formatLong:Q,formatRelative:(t,e,r,n)=>$[t],localize:Z,match:K,options:{weekStartsOn:0,firstWeekContainsDate:1}};let rt={};function nt(){return rt}function ot(t){const e=D(t),r=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return r.setUTCFullYear(e.getFullYear()),+t-+r}function it(t,e,r){const[n,o]=G(r?.in,t,e),i=z(n),a=z(o),c=+i-ot(i),s=+a-ot(a);return Math.round((c-s)/864e5)}function at(t,e){const r=D(t,e?.in);return r.setFullYear(r.getFullYear(),0,1),r.setHours(0,0,0,0),r}function ct(t,e){const r=D(t,e?.in);return it(r,at(r))+1}function st(t,e){const r=nt(),n=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,o=D(t,e?.in),i=o.getDay(),a=(i<n?7:0)+i-n;return o.setDate(o.getDate()-a),o.setHours(0,0,0,0),o}function lt(t,e){return st(t,{...e,weekStartsOn:1})}function ut(t,e){const r=D(t,e?.in),n=r.getFullYear(),o=M(r,0);o.setFullYear(n+1,0,4),o.setHours(0,0,0,0);const i=lt(o),a=M(r,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const c=lt(a);return r.getTime()>=i.getTime()?n+1:r.getTime()>=c.getTime()?n:n-1}function dt(t,e){const r=ut(t,e),n=M(e?.in||t,0);return n.setFullYear(r,0,4),n.setHours(0,0,0,0),lt(n)}function At(t,e){const r=D(t,e?.in),n=+lt(r)-+dt(r);return Math.round(n/E)+1}function ft(t,e){const r=D(t,e?.in),n=r.getFullYear(),o=nt(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,a=M(e?.in||t,0);a.setFullYear(n+1,0,i),a.setHours(0,0,0,0);const c=st(a,e),s=M(e?.in||t,0);s.setFullYear(n,0,i),s.setHours(0,0,0,0);const l=st(s,e);return+r>=+c?n+1:+r>=+l?n:n-1}function pt(t,e){const r=nt(),n=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,o=ft(t,e),i=M(e?.in||t,0);i.setFullYear(o,0,n),i.setHours(0,0,0,0);return st(i,e)}function mt(t,e){const r=D(t,e?.in),n=+st(r,e)-+pt(r,e);return Math.round(n/E)+1}function bt(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const ht={y(t,e){const r=t.getFullYear(),n=r>0?r:1-r;return bt("yy"===e?n%100:n,e.length)},M(t,e){const r=t.getMonth();return"M"===e?String(r+1):bt(r+1,2)},d:(t,e)=>bt(t.getDate(),e.length),a(t,e){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return r.toUpperCase();case"aaa":return r;case"aaaaa":return r[0];default:return"am"===r?"a.m.":"p.m."}},h:(t,e)=>bt(t.getHours()%12||12,e.length),H:(t,e)=>bt(t.getHours(),e.length),m:(t,e)=>bt(t.getMinutes(),e.length),s:(t,e)=>bt(t.getSeconds(),e.length),S(t,e){const r=e.length,n=t.getMilliseconds();return bt(Math.trunc(n*Math.pow(10,r-3)),e.length)}},gt="midnight",yt="noon",Ct="morning",vt="afternoon",wt="evening",kt="night",xt={G:function(t,e,r){const n=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return r.era(n,{width:"abbreviated"});case"GGGGG":return r.era(n,{width:"narrow"});default:return r.era(n,{width:"wide"})}},y:function(t,e,r){if("yo"===e){const e=t.getFullYear(),n=e>0?e:1-e;return r.ordinalNumber(n,{unit:"year"})}return ht.y(t,e)},Y:function(t,e,r,n){const o=ft(t,n),i=o>0?o:1-o;if("YY"===e){return bt(i%100,2)}return"Yo"===e?r.ordinalNumber(i,{unit:"year"}):bt(i,e.length)},R:function(t,e){return bt(ut(t),e.length)},u:function(t,e){return bt(t.getFullYear(),e.length)},Q:function(t,e,r){const n=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(n);case"QQ":return bt(n,2);case"Qo":return r.ordinalNumber(n,{unit:"quarter"});case"QQQ":return r.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(n,{width:"narrow",context:"formatting"});default:return r.quarter(n,{width:"wide",context:"formatting"})}},q:function(t,e,r){const n=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(n);case"qq":return bt(n,2);case"qo":return r.ordinalNumber(n,{unit:"quarter"});case"qqq":return r.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(n,{width:"narrow",context:"standalone"});default:return r.quarter(n,{width:"wide",context:"standalone"})}},M:function(t,e,r){const n=t.getMonth();switch(e){case"M":case"MM":return ht.M(t,e);case"Mo":return r.ordinalNumber(n+1,{unit:"month"});case"MMM":return r.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(n,{width:"narrow",context:"formatting"});default:return r.month(n,{width:"wide",context:"formatting"})}},L:function(t,e,r){const n=t.getMonth();switch(e){case"L":return String(n+1);case"LL":return bt(n+1,2);case"Lo":return r.ordinalNumber(n+1,{unit:"month"});case"LLL":return r.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(n,{width:"narrow",context:"standalone"});default:return r.month(n,{width:"wide",context:"standalone"})}},w:function(t,e,r,n){const o=mt(t,n);return"wo"===e?r.ordinalNumber(o,{unit:"week"}):bt(o,e.length)},I:function(t,e,r){const n=At(t);return"Io"===e?r.ordinalNumber(n,{unit:"week"}):bt(n,e.length)},d:function(t,e,r){return"do"===e?r.ordinalNumber(t.getDate(),{unit:"date"}):ht.d(t,e)},D:function(t,e,r){const n=ct(t);return"Do"===e?r.ordinalNumber(n,{unit:"dayOfYear"}):bt(n,e.length)},E:function(t,e,r){const n=t.getDay();switch(e){case"E":case"EE":case"EEE":return r.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},e:function(t,e,r,n){const o=t.getDay(),i=(o-n.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return bt(i,2);case"eo":return r.ordinalNumber(i,{unit:"day"});case"eee":return r.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(o,{width:"short",context:"formatting"});default:return r.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,r,n){const o=t.getDay(),i=(o-n.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return bt(i,e.length);case"co":return r.ordinalNumber(i,{unit:"day"});case"ccc":return r.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(o,{width:"narrow",context:"standalone"});case"cccccc":return r.day(o,{width:"short",context:"standalone"});default:return r.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,r){const n=t.getDay(),o=0===n?7:n;switch(e){case"i":return String(o);case"ii":return bt(o,e.length);case"io":return r.ordinalNumber(o,{unit:"day"});case"iii":return r.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},a:function(t,e,r){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},b:function(t,e,r){const n=t.getHours();let o;switch(o=12===n?yt:0===n?gt:n/12>=1?"pm":"am",e){case"b":case"bb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(o,{width:"narrow",context:"formatting"});default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,r){const n=t.getHours();let o;switch(o=n>=17?wt:n>=12?vt:n>=4?Ct:kt,e){case"B":case"BB":case"BBB":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(o,{width:"narrow",context:"formatting"});default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,r){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),r.ordinalNumber(e,{unit:"hour"})}return ht.h(t,e)},H:function(t,e,r){return"Ho"===e?r.ordinalNumber(t.getHours(),{unit:"hour"}):ht.H(t,e)},K:function(t,e,r){const n=t.getHours()%12;return"Ko"===e?r.ordinalNumber(n,{unit:"hour"}):bt(n,e.length)},k:function(t,e,r){let n=t.getHours();return 0===n&&(n=24),"ko"===e?r.ordinalNumber(n,{unit:"hour"}):bt(n,e.length)},m:function(t,e,r){return"mo"===e?r.ordinalNumber(t.getMinutes(),{unit:"minute"}):ht.m(t,e)},s:function(t,e,r){return"so"===e?r.ordinalNumber(t.getSeconds(),{unit:"second"}):ht.s(t,e)},S:function(t,e){return ht.S(t,e)},X:function(t,e,r){const n=t.getTimezoneOffset();if(0===n)return"Z";switch(e){case"X":return Bt(n);case"XXXX":case"XX":return Ot(n);default:return Ot(n,":")}},x:function(t,e,r){const n=t.getTimezoneOffset();switch(e){case"x":return Bt(n);case"xxxx":case"xx":return Ot(n);default:return Ot(n,":")}},O:function(t,e,r){const n=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+jt(n,":");default:return"GMT"+Ot(n,":")}},z:function(t,e,r){const n=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+jt(n,":");default:return"GMT"+Ot(n,":")}},t:function(t,e,r){return bt(Math.trunc(+t/1e3),e.length)},T:function(t,e,r){return bt(+t,e.length)}};function jt(t,e=""){const r=t>0?"-":"+",n=Math.abs(t),o=Math.trunc(n/60),i=n%60;return 0===i?r+String(o):r+String(o)+e+bt(i,2)}function Bt(t,e){if(t%60==0){return(t>0?"-":"+")+bt(Math.abs(t)/60,2)}return Ot(t,e)}function Ot(t,e=""){const r=t>0?"-":"+",n=Math.abs(t);return r+bt(Math.trunc(n/60),2)+e+bt(n%60,2)}const St=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Pt=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},It={p:Pt,P:(t,e)=>{const r=t.match(/(P+)(p+)?/)||[],n=r[1],o=r[2];if(!o)return St(t,e);let i;switch(n){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",St(n,e)).replace("{{time}}",Pt(o,e))}},Et=/^D+$/,Lt=/^Y+$/,Mt=["D","DD","YY","YYYY"];function Dt(t){return t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function Tt(t){return!(!Dt(t)&&"number"!=typeof t||isNaN(+D(t)))}const zt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,qt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ht=/^'([^]*?)'?$/,Gt=/''/g,Jt=/[a-zA-Z]/;function Wt(t,e,r){const n=nt(),o=r?.locale??n.locale??et,i=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=D(t,r?.in);if(!Tt(c))throw new RangeError("Invalid time value");let s=e.match(qt).map((t=>{const e=t[0];if("p"===e||"P"===e){return(0,It[e])(t,o.formatLong)}return t})).join("").match(zt).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:Rt(t)};if(xt[e])return{isToken:!0,value:t};if(e.match(Jt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));o.localize.preprocessor&&(s=o.localize.preprocessor(c,s));const l={firstWeekContainsDate:i,weekStartsOn:a,locale:o};return s.map((n=>{if(!n.isToken)return n.value;const i=n.value;(!r?.useAdditionalWeekYearTokens&&function(t){return Lt.test(t)}(i)||!r?.useAdditionalDayOfYearTokens&&function(t){return Et.test(t)}(i))&&function(t,e,r){const n=function(t,e,r){const n="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${n} to the input \`${r}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,r);if(console.warn(n),Mt.includes(t))throw new RangeError(n)}(i,e,String(t));return(0,xt[i[0]])(c,i,o.localize,l)})).join("")}function Rt(t){const e=t.match(Ht);return e?e[1].replace(Gt,"'"):t}function Nt(t){var e=T(t,q())?"overdue":"incoming";return{formattedDate:t?W(t)?"Today":N(t)?"Tomorrow":_(t)?"Yesterday":Wt(t,"dd/MM/yyyy"):"Due Date",dateClass:e}}function Yt(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=document.createElement("button");return n.classList="btn btn-icon",n.type="button",n.innerHTML=t,n.ariaLabel=e,r&&n.addEventListener("click",r),n}function _t(t){return _t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_t(t)}function Vt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ft(n.key),n)}}function Ft(t){var e=function(t,e){if("object"!=_t(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=_t(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==_t(e)?e:e+""}var Qt=function(){return t=function t(e,r){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.dialog=document.querySelector(e),this.form=document.querySelector(r),this.current=null,this.submitBtn=this.form.querySelector('button[type = "submit"]'),this.cancelBtn=this.form.querySelector(".btn-cancel"),this.cancelBtn.addEventListener("click",(function(){return n.onCancel()})),this.form.addEventListener("submit",(function(t){return n.onSubmit(t)})),this.dialog.addEventListener("click",(function(t){var e=n.dialog.getBoundingClientRect();(e.left>t.clientX||e.right<t.clientX||e.top>t.clientY||e.bottom<t.clientY)&&n.close()}))},e=[{key:"open",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.current=t,this.dialog.showModal()}},{key:"close",value:function(){this.dialog.close()}},{key:"onSubmit",value:function(t){throw t.preventDefault(),new Error("onSubmit method must be implemented in the subClass")}},{key:"onCancel",value:function(){this.close()}}],e&&Vt(t.prototype,e),r&&Vt(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function $t(t){return $t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},$t(t)}function Ut(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Zt(n.key),n)}}function Zt(t){var e=function(t,e){if("object"!=$t(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=$t(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==$t(e)?e:e+""}function Xt(t,e,r){return e=te(e),function(t,e){if(e&&("object"==$t(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Kt()?Reflect.construct(e,r||[],te(t).constructor):e.apply(t,r))}function Kt(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Kt=function(){return!!t})()}function te(t){return te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},te(t)}function ee(t,e){return ee=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ee(t,e)}const re=new(function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=Xt(this,e,[".dialog-delete",".form-delete"])).title=t.form.querySelector(".form-title"),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ee(t,e)}(e,t),r=e,n=[{key:"open",value:function(t){t&&t.type&&-1!==t.id&&(this.current=t,this.title.textContent="Are you sure you want to delete this ".concat(this.current.type,"?"),this.submitBtn.textContent="Delete ".concat(this.current.type),this.dialog.showModal())}},{key:"onSubmit",value:function(t){t.preventDefault();var e=this.current.id;-1!==e&&("task"==this.current.type?wn.getTasks().delete(e):"project"==this.current.type&&(xn.getProjects().delete(e),xn.renderProjects(document.querySelector(".sidebar-nav-list-projects")),wn.getTasks().filter((function(t){return t.projectId!==e})),So.activate(So.mainNav[0]),So.updateNavigationDOM()),wn.renderTasks(So.getActiveItem().filter),this.close())}}],n&&Ut(r.prototype,n),o&&Ut(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(Qt)),ne='<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M25.3332 8.54669L23.4532 6.66669L15.9998 14.12L8.5465 6.66669L6.6665 8.54669L14.1198 16L6.6665 23.4534L8.5465 25.3334L15.9998 17.88L23.4532 25.3334L25.3332 23.4534L17.8798 16L25.3332 8.54669Z" fill="#A1A1AA"/>\n</svg>\n';const oe=function(t){t.classList.add("hidden")},ie=function(t){t.classList.remove("hidden")};function ae(t){return ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ae(t)}function ce(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function se(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ce(Object(r),!0).forEach((function(e){le(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ce(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function le(t,e,r){return(e=de(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ue(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,de(n.key),n)}}function de(t){var e=function(t,e){if("object"!=ae(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=ae(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==ae(e)?e:e+""}function Ae(t,e,r){(function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")})(t,e),e.set(t,r)}function fe(t,e){return t.get(me(t,e))}function pe(t,e,r){return t.set(me(t,e),r),r}function me(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var be=new WeakMap,he=new WeakMap,ge=new WeakMap;const ye=new(function(){return t=function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),Ae(this,be,void 0),Ae(this,he,void 0),Ae(this,ge,void 0),pe(be,this,document.querySelector(e)),fe(be,this).querySelector(".btn-undo").addEventListener("click",(function(){fe(he,r)&&-1!=fe(he,r).id&&(wn.getTasks().update(fe(he,r).id,se(se({},fe(he,r)),{},{completed:!1})),wn.renderTasks(So.getActiveItem().filter),r.close())}));var n=Yt(ne,"Close Popup",(function(){return r.close()}));fe(be,this).appendChild(n),fe(be,this).addEventListener("mouseover",(function(){return r.addTimeout()}))},(e=[{key:"open",value:function(t){ie(fe(be,this)),pe(he,this,t),this.addTimeout()}},{key:"addTimeout",value:function(){var t=this;clearTimeout(fe(ge,this)),pe(ge,this,setTimeout((function(){return t.close}),5e3))}},{key:"close",value:function(){clearTimeout(fe(ge,this)),oe(fe(be,this))}}])&&ue(t.prototype,e),r&&ue(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}())(".popup-undo"),Ce='<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M19 19H5V8H19M16 1V3H8V1H6V3H5C3.89 3 3 3.89 3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V5C21 3.89 20.1 3 19 3H18V1" fill="#A1A1AA"/>\n</svg>\n',ve='<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M6 19.5C6 20.0304 6.21071 20.5391 6.58579 20.9142C6.96086 21.2893 7.46957 21.5 8 21.5H16C16.5304 21.5 17.0391 21.2893 17.4142 20.9142C17.7893 20.5391 18 20.0304 18 19.5V7.5H6V19.5ZM8 9.5H16V19.5H8V9.5ZM15.5 4.5L14.5 3.5H9.5L8.5 4.5H5V6.5H19V4.5H15.5Z" fill="#71717A"/>\n</svg>\n';function we(t){return we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},we(t)}function ke(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,xe(n.key),n)}}function xe(t){var e=function(t,e){if("object"!=we(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=we(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==we(e)?e:e+""}function je(t,e,r){Be(t,e),e.set(t,r)}function Be(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Oe(t,e){return t.get(Pe(t,e))}function Se(t,e,r){return t.set(Pe(t,e),r),r}function Pe(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var Ie=new WeakMap,Ee=new WeakMap,Le=new WeakMap,Me=new WeakSet,De=function(){return t=function t(e){var r,n,o=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".btn-label-date",c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".form-input-date";!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),Be(r=this,n=Me),n.add(r),je(this,Ie,void 0),je(this,Ee,void 0),je(this,Le,void 0);var s=document.querySelector(e);Se(Ie,this,s.querySelector(a)),Se(Ee,this,s.querySelector(c)),Oe(Ee,this).classList.add("form-date-picker-input"),Pe(Me,this,Te).call(this),Pe(Me,this,ze).call(this),Oe(Ie,this).addEventListener("click",(function(t){t.preventDefault(),Oe(Ee,o).showPicker()})),Oe(Ee,this).addEventListener("change",(function(t){var e=t.target.value;o.updateDate(e?new Date(e):null),i&&i(t)}))},(e=[{key:"updateDate",value:function(t){Se(Le,this,t),Pe(Me,this,ze).call(this)}},{key:"getDate",value:function(){return Oe(Le,this)}}])&&ke(t.prototype,e),r&&ke(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function Te(){Oe(Ie,this).classList="btn btn-label task-date"}function ze(){var t=Nt(Oe(Le,this));Oe(Ie,this).innerHTML=Ce+t.formattedDate,Oe(Ie,this).appendChild(Oe(Ee,this)),Pe(Me,this,Te).call(this),Oe(Le,this)&&Oe(Ie,this).classList.add("task-date-".concat(t.dateClass))}const qe='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M5.00008 2.5C5.2211 2.5 5.43306 2.5878 5.58934 2.74408C5.74562 2.90036 5.83341 3.11232 5.83341 3.33333V4.06667C6.71675 3.7 7.91675 3.33333 9.16675 3.33333C11.6667 3.33333 11.6667 5 13.3334 5C15.8334 5 16.6667 3.33333 16.6667 3.33333V10C16.6667 10 15.8334 11.6667 13.3334 11.6667C10.8334 11.6667 10.8334 10 9.16675 10C6.66675 10 5.83341 11.6667 5.83341 11.6667V17.5H4.16675V3.33333C4.16675 3.11232 4.25455 2.90036 4.41083 2.74408C4.56711 2.5878 4.77907 2.5 5.00008 2.5Z" fill="#B91C1C"/>\n</svg>\n';function He(t){return He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},He(t)}function Ge(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Je(n.key),n)}}function Je(t){var e=function(t,e){if("object"!=He(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=He(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==He(e)?e:e+""}function We(t,e,r){(function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")})(t,e),e.set(t,r)}function Re(t,e){return t.get(Ye(t,e))}function Ne(t,e,r){return t.set(Ye(t,e),r),r}function Ye(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var _e=new WeakMap,Ve=new WeakMap,Fe=new WeakMap,Qe=new WeakMap,$e=function(){return t=function t(e,r,n,o,i){var a=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),We(this,_e,void 0),We(this,Ve,void 0),We(this,Fe,void 0),We(this,Qe,void 0);var c=document.querySelector(e);c&&console.log("Popup: fine at parent"),Ne(_e,this,c.querySelector(r)),Re(_e,this)&&console.log("Popup: fine at button"),Ne(Ve,this,c.querySelector(n)),Re(Ve,this)&&console.log("Popup: fine at popup"),Ne(Fe,this,c.querySelector(o)),Re(Fe,this)&&console.log("Popup: fine at input"),Ne(Qe,this,!1),Re(_e,this).addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation(),a.open()})),Re(Ve,this).addEventListener("click",(function(t){t.stopPropagation(),i(t)})),window.addEventListener("click",(function(t){var e=t.target;!Re(Qe,a)||Re(_e,a).contains(e)||Re(Ve,a).contains(e)||a.close()}))},(e=[{key:"open",value:function(){Ne(Qe,this,!0),ie(Re(Ve,this))}},{key:"close",value:function(){Ne(Qe,this,!1),oe(Re(Ve,this))}},{key:"getPopup",value:function(){return Re(Ve,this)}},{key:"getButton",value:function(){return Re(_e,this)}},{key:"getInput",value:function(){return Re(Fe,this)}}])&&Ge(t.prototype,e),r&&Ge(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function Ue(t){return Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ue(t)}function Ze(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Xe(n.key),n)}}function Xe(t){var e=function(t,e){if("object"!=Ue(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Ue(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Ue(e)?e:e+""}function Ke(t,e,r){return e=rr(e),function(t,e){if(e&&("object"==Ue(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return tr(t)}(t,er()?Reflect.construct(e,r||[],rr(t).constructor):e.apply(t,r))}function tr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function er(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(er=function(){return!!t})()}function rr(t){return rr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},rr(t)}function nr(t,e){return nr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},nr(t,e)}function or(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function ir(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var ar=new WeakMap,cr=new WeakSet,sr=function(t){function e(t,r,n,o,i,a){var c,s,l;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),c=Ke(this,e,[t,r,n,o,function(t){return ir(cr,tr(c),ur).call(tr(c),t,a)}]),or(s=c,l=cr),l.add(s),function(t,e,r){or(t,e),e.set(t,r)}(c,ar,void 0),c.setList(i),c}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nr(t,e)}(e,t),r=e,(n=[{key:"setList",value:function(t){var e,r,n;r=this,n=t,(e=ar).set(ir(e,r),n),ir(cr,this,lr).call(this)}}])&&Ze(r.prototype,n),o&&Ze(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}($e);function lr(){var t,e,r=this;this.getPopup().innerHTML="",(t=ar,e=this,t.get(ir(t,e))).forEach((function(t){var e=document.createElement("li");e.classList="form-select-list-item";var n=document.createElement("button");if(n.type="button",n.classList="btn btn-select ".concat(t.classList),n.dataset.value=t.name,n.dataset.id=t.id,t.icon)n.innerHTML=t.icon+t.name;else if(t.color){var o=document.createElement("div");o.classList="project-color project-color-s",o.style.backgroundColor=t.color,n.appendChild(o),n.innerHTML+=t.name}e.appendChild(n),r.getPopup().appendChild(e)}))}function ur(t,e){t.target.classList.contains("btn-select")&&(e(t),this.close())}function dr(t){return dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dr(t)}function Ar(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,fr(n.key),n)}}function fr(t){var e=function(t,e){if("object"!=dr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=dr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==dr(e)?e:e+""}function pr(t,e,r){return e=hr(e),function(t,e){if(e&&("object"==dr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return mr(t)}(t,br()?Reflect.construct(e,r||[],hr(t).constructor):e.apply(t,r))}function mr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function br(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(br=function(){return!!t})()}function hr(t){return hr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},hr(t)}function gr(t,e){return gr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},gr(t,e)}function yr(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Cr(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var vr=[{id:1,name:"High",classList:"btn-select-priority-1",icon:qe},{id:2,name:"Medium",classList:"btn-select-priority-2",icon:qe},{id:3,name:"Low",classList:"btn-select-priority-3",icon:qe},{id:4,name:"No Priority",classList:"btn-select-priority-4",icon:qe}],wr=new WeakMap,kr=new WeakSet,xr=function(t){function e(t){var r,n,o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".btn-label-priority",c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".form-popup-priority",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:".form-input-priority";return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=pr(this,e,[t,a,c,s,vr,function(t){Cr(kr,mr(r),jr).call(mr(r),t),i&&i(t)}]),yr(n=r,o=kr),o.add(n),function(t,e,r){yr(t,e),e.set(t,r)}(r,wr,void 0),r.setCurrentPriority(4),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&gr(t,e)}(e,t),r=e,(n=[{key:"getCurrentPriority",value:function(){return e=this,(t=wr).get(Cr(t,e));var t,e}},{key:"setCurrentPriority",value:function(t){for(var e=0;e<vr.length;e++)this.getButton().classList.remove("btn-label-priority-".concat(vr[e].id));var r,n,o,i=vr.find((function(e){return e.id==t}));this.getButton().classList.add("btn-label-priority-".concat(t)),this.getButton().innerHTML=i.icon+i.name,this.getInput().value=t,n=this,o=t,(r=wr).set(Cr(r,n),o)}}])&&Ar(r.prototype,n),o&&Ar(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(sr);function jr(t){this.setCurrentPriority(t.target.dataset.id)}const Br='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M11.6667 8.33333H16.25L11.6667 3.75V8.33333ZM4.16667 2.5H12.5L17.5 7.5V15.8333C17.5 16.2754 17.3244 16.6993 17.0118 17.0118C16.6993 17.3244 16.2754 17.5 15.8333 17.5H4.16667C3.24167 17.5 2.5 16.75 2.5 15.8333V4.16667C2.5 3.24167 3.24167 2.5 4.16667 2.5ZM4.16667 4.16667V15.8333H15.8333V10H10V4.16667H4.16667Z" fill="#A1A1AA"/>\n</svg>\n';function Or(t){return Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Or(t)}function Sr(t){return function(t){if(Array.isArray(t))return Pr(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Pr(t,e);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Pr(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=Array(e);r<e;r++)n[r]=t[r];return n}function Ir(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Er(n.key),n)}}function Er(t){var e=function(t,e){if("object"!=Or(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Or(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Or(e)?e:e+""}function Lr(t,e,r){return e=Tr(e),function(t,e){if(e&&("object"==Or(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Mr(t)}(t,Dr()?Reflect.construct(e,r||[],Tr(t).constructor):e.apply(t,r))}function Mr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Dr(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Dr=function(){return!!t})()}function Tr(t){return Tr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Tr(t)}function zr(t,e){return zr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},zr(t,e)}function qr(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Hr(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var Gr=new WeakMap,Jr=new WeakSet,Wr=function(t){function e(t){var r,n,o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".btn-label-project",c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".form-popup-project",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:".form-input-project";return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=Lr(this,e,[t,a,c,s,[],function(t){Hr(Jr,Mr(r),Rr).call(Mr(r),t),i&&i(t)}]),qr(n=r,o=Jr),o.add(n),function(t,e,r){qr(t,e),e.set(t,r)}(r,Gr,void 0),r.setCurrentProject(null),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zr(t,e)}(e,t),r=e,(n=[{key:"updateList",value:function(){this.setList(this.getProjectsList())}},{key:"getCurrentProject",value:function(){return e=this,(t=Gr).get(Hr(t,e));var t,e}},{key:"setCurrentProject",value:function(t){var e,r,n;if(r=this,n=t,(e=Gr).set(Hr(e,r),n),console.log("projectSelect: "+t),t){var o=document.createElement("div");o.classList="project-color project-color-s",o.style.backgroundColor=t.color,this.getButton().innerHTML="",this.getButton().appendChild(o),this.getButton().innerHTML+=t.name,this.getInput().value=t.id}else this.getInput().value=-1,this.getButton().innerHTML=Br+"Project"}},{key:"getProjectsList",value:function(){return[].concat(Sr(xn.getProjects().getList()),[{id:-1,name:"No Project",icon:Br}])}}])&&Ir(r.prototype,n),o&&Ir(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(sr);function Rr(t){var e=t.target.dataset.id,r=xn.find((function(t){return t.id==e}));this.setCurrentProject(r)}function Nr(t){return Nr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Nr(t)}function Yr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function _r(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Yr(Object(r),!0).forEach((function(e){Vr(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Yr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Vr(t,e,r){return(e=Qr(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Fr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Qr(n.key),n)}}function Qr(t){var e=function(t,e){if("object"!=Nr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Nr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Nr(e)?e:e+""}function $r(t,e,r){return e=Xr(e),function(t,e){if(e&&("object"==Nr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Ur()?Reflect.construct(e,r||[],Xr(t).constructor):e.apply(t,r))}function Ur(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Ur=function(){return!!t})()}function Zr(){return Zr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=Xr(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},Zr.apply(null,arguments)}function Xr(t){return Xr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Xr(t)}function Kr(t,e){return Kr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Kr(t,e)}const tn=new(function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=$r(this,e,[".dialog-show-task",".form-show-task"])).taskChecked=!1,t.titleInput=t.form.querySelector(".form-input-title"),t.descriptionInput=t.form.querySelector(".form-input-description"),t.btnCheck=t.dialog.querySelector(".btn-check"),t.btnCheck.addEventListener("click",(function(){var e="checked";t.taskChecked=!t.taskChecked,t.taskChecked?(console.log("showTaskDialog: task checked"),wn.getTasks().update(t.current.id,_r(_r({},t.current),{},{completed:!0})),t.btnCheck.classList.add(e),t.title.classList.add(e),console.log("tasks: "+wn),t.dialog.close(),ye.open(t.current),setTimeout((function(){return ye.close()}),5e3),console.log("tasks: "+wn),oe(t.labelBtns),oe(t.hr)):(t.uncheckTask(e),wn.getTasks().add(t.current)),wn.renderTasks(So.getActiveItem().filter)})),t.info=t.dialog.querySelector(".dialog-task-info"),t.info.addEventListener("click",(function(){t.taskChecked||t.showForm()})),t.labelBtns=t.dialog.querySelector(".form-btns-label"),t.hr=t.dialog.querySelector("hr"),t.title=t.info.querySelector(".dialog-task-title"),t.description=t.info.querySelector(".dialog-task-description"),t.closeBtn=Yt(ne,"Close Dialog",(function(){t.dialog.close()})),t.dialog.appendChild(t.closeBtn),t.datePicker=new De(".dialog-show-task",(function(){t.updateValue("dueDate",t.datePicker.getDate())})),t.projectSelect=new Wr(".dialog-show-task",(function(){return t.updateValue("projectId",t.projectSelect.getCurrentProject().id)})),t.prioritySelect=new xr(".dialog-show-task",(function(){var e=t.prioritySelect.getCurrentPriority();t.updateValue("priority",e),t.btnCheck.classList="btn btn-check btn-check-".concat(e)})),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Kr(t,e)}(e,t),r=e,n=[{key:"onSubmit",value:function(t){t.preventDefault();var e=e.createTask(this.titleInput.value,this.descriptionInput.value||null,this.datePicker.getDate(),this.projectSelect.getInput().value,this.prioritySelect.getInput().value);if(this.current&&-1!==this.current.id){var r=this.current.id;wn.getTasks().update(r,_r(_r({},e),{},{id:r})),wn.renderTasks(So.getActiveItem().filter),this.title.textContent=e.title,this.description.textContent=e.description}this.hideForm()}},{key:"onCancel",value:function(){this.hideForm()}},{key:"updateValue",value:function(t,e){var r=_r(_r({},this.current),{},Vr({},t,e));wn.getTasks().update(this.current.id,r),wn.renderTasks(So.getActiveItem().filter),this.current=r}},{key:"open",value:function(t){var r,n,o,i,a,c=this;(r=e,n="open",o=this,a=Zr(Xr(1&(i=3)?r.prototype:r),n,o),2&i&&"function"==typeof a?function(t){return a.apply(o,t)}:a)([t]),this.taskChecked=!1,this.projectSelect.updateList();var s=this.current&&this.current.title||"";this.titleInput.value=s,this.title.textContent=s;var l=this.current&&this.current.description||"";this.descriptionInput.value=l,this.descriptionInput.parentNode.dataset.value=l,this.description.textContent=l,console.log("current"),console.log(this.current),this.btnCheck.classList="btn btn-check",this.current&&this.current.priority&&this.btnCheck.classList.add("btn-check-".concat(this.current.priority)),this.current&&this.current.completed&&(this.btnCheck.classList.add("checked"),this.title.classList.add("checked")),this.datePicker.updateDate(this.current&&this.current.dueDate||null),this.projectSelect.setCurrentProject(this.current&&this.current.projectId?xn.find((function(t){return t.id==c.current.projectId})):null),this.prioritySelect.setCurrentPriority(this.current&&this.current.priority||4),this.hideForm()}},{key:"showForm",value:function(){oe(this.info),ie(this.form),this.titleInput.value=this.current&&this.current.title||"",this.descriptionInput.value=this.current&&this.current.description||"",this.btnCheck.disabled=!0}},{key:"hideForm",value:function(){ie(this.info),oe(this.form),this.btnCheck.disabled=!1}},{key:"uncheckTask",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"checked";this.taskChecked=!1,this.btnCheck.classList.remove(t),this.title.classList.remove(t),ie(this.labelBtns),ie(this.hr)}}],n&&Fr(r.prototype,n),o&&Fr(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(Qt));function en(t){return en="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},en(t)}function rn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function nn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?rn(Object(r),!0).forEach((function(e){on(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):rn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function on(t,e,r){return(e=cn(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function an(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,cn(n.key),n)}}function cn(t){var e=function(t,e){if("object"!=en(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=en(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==en(e)?e:e+""}function sn(t,e,r){ln(t,e),e.set(t,r)}function ln(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function un(t,e){return t.get(An(t,e))}function dn(t,e,r){return t.set(An(t,e),r),r}function An(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}var fn=new WeakMap,pn=new WeakMap,mn=new WeakMap,bn=new WeakSet,hn=function(){return t=function t(e,r,n){var o,i,a=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),ln(o=this,i=bn),i.add(o),sn(this,fn,void 0),sn(this,pn,void 0),sn(this,mn,void 0),dn(fn,this,document.querySelector(e)),console.log("taskRenderer: fine at parent"+un(fn,this)),dn(pn,this,document.querySelector(r)),dn(mn,this,n),un(fn,this).addEventListener("click",(function(t){var e=t.target;for(console.log("taskRenderer: clicked on "+e),console.log("here"),console.log(e);"path"==e.tagName||"svg"==e.tagName;)e=e.parentNode;if(console.log("now here"),console.log(e),e.classList)if(e.classList.contains("btn-check")){console.log("taskRenderer: clicked on check button"+t.target);var r=An(bn,a,gn).call(a,e);console.log(r.completed,r),un(mn,a).update(r.id,nn(nn({},r),{},{completed:!0})),console.log(r.completed,r),console.log(e),a.render(So.getActiveItem().filter),ye.open(r),setTimeout((function(){return ye.close()}),5e3),console.log(e)}else if(e.classList.contains("btn-task-edit")){var n=An(bn,a,gn).call(a,e);console.log("taskRenderer: clicked on edit button"+t.target),Wo.open(n)}else if(e.classList.contains("btn-task-delete")){var o=An(bn,a,gn).call(a,e);re.open({type:"task",id:o.id})}else if(e.classList.contains("task-title")||e.classList.contains("task-description")){var i=An(bn,a,gn).call(a,e);tn.open(i)}}))},e=[{key:"render",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return t};if(un(fn,this).innerHTML="",un(mn,this).getList().filter(e).length<1||un(mn,this).getList().length<1)return"today"===So.getActiveItem().dataName?(un(pn,this).firstChild.textContent="No more tasks today!",un(pn,this).childNodes[1].textContent="Add more tasks using the button below, or just call it a day!"):"upcoming"===So.getActiveItem().dataName?(un(pn,this).firstChild.textContent="No tasks scheduled!",un(pn,this).childNodes[1].textContent="Add more tasks using the button below, or just call it a day!"):"recently_completed"===So.getActiveItem().dataName?(un(pn,this).firstChild.textContent="No completed tasks yet!",un(pn,this).childNodes[1].textContent="Go complete your tasks or add tasks!"):So.getActiveItem().color?(un(pn,this).firstChild.textContent="No tasks in this project!",un(pn,this).childNodes[1].textContent="Add more tasks using the button below, or just call it a day!"):(un(pn,this).firstChild.textContent="It's pretty empty here!",un(pn,this).childNodes[1].textContent="Add more tasks using the button below, or just call it a day!"),ie(un(pn,this)),void oe(un(fn,this));var r=un(mn,this).getList().filter(e).sort((function(t,e){return t.priority-e.priority||t.dueDate-e.dueDate}));console.log("taskRenderer: "+r),r.forEach((function(e){un(fn,t).appendChild(An(bn,t,yn).call(t,e))})),oe(un(pn,this)),ie(un(fn,this))}}],e&&an(t.prototype,e),r&&an(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();function gn(t){for(var e=t;e&&(!e.classList.contains("task")||e==document.body);)e=e.parentNode;return e&&e!=document.body?(console.log("taskRenderer - #findTask: found task"+e.dataset.id),un(mn,this).getList().find((function(t){return t.id==e.dataset.id}))):null}function yn(t){var e=document.createElement("li");e.classList="task",e.dataset.id=t.id;var r=document.createElement("button");r.type="button",r.classList="btn btn-check btn-check-".concat(t.priority);var n=document.createElement("div");n.classList="task-container";var o=document.createElement("div");o.classList="task-info";var i=document.createElement("h3");if(i.classList="task-title",i.textContent=t.title,o.appendChild(i),t.completed&&(r.classList.add("checked"),i.classList.add("checked")),t.description){var a=document.createElement("p");a.classList="task-description",a.textContent=t.description,o.appendChild(a)}if(t.dueDate){var c=document.createElement("div"),s=Nt(t.dueDate);c.classList="task-date ".concat(s.dateClass),c.innerHTML=Ce+s.formattedDate,o.appendChild(c)}var l=document.createElement("div");l.classList="task-controls";var u=document.createElement("div");u.classList="task-control-btns";var d=Yt('<svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M20.71 7.54C21.1 7.15 21.1 6.5 20.71 6.13L18.37 3.79C18 3.4 17.35 3.4 16.96 3.79L15.12 5.62L18.87 9.37M3 17.75V21.5H6.75L17.81 10.43L14.06 6.68L3 17.75Z" fill="#71717A"/>\n</svg>\n',"Edit Task");d.classList.add("btn-task-edit");var A=Yt(ve,"Delete Task");A.classList.add("btn-task-delete"),u.append(d,A);var f=document.createElement("div");f.classList="task-project";var p=document.createElement("div"),m=xn.find((function(e){return e.id==t.projectId}));if(p.classList="task-project-title ".concat(m?"":"task-project-title-empty"),p.textContent=m?m.name:"No Project",f.appendChild(p),m){var b=document.createElement("div");b.classList="project-color project-color-s",b.style.backgroundColor=m.color,f.append(b)}return l.append(u,f),n.append(o,l),e.append(r,n),e}var Cn=new I("tasks"),vn=new hn(".task-list",".empty-state",Cn);const wn={createTask:function(t,e,r){return{title:t,description:e,dueDate:r,projectId:arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,priority:arguments.length>4&&void 0!==arguments[4]?arguments[4]:4,completed:arguments.length>5&&void 0!==arguments[5]&&arguments[5]}},renderTasks:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return t};vn.render(t)},getTasks:function(){return Cn}};var kn=new I("projects");const xn={find:function(t){return kn.getList().find(t)},createProject:function(t,e){return{name:t,color:e,dataName:t.replace(" ","_").toLowerCase()}},getProjects:function(){return kn},renderProjects:function(t){t.innerHTML="",kn.getList().forEach((function(e){var r=document.createElement("li");r&&console.log("renderProjects: fine at li"),r.classList="sidebar-nav-list-item";var n=document.createElement("button");n&&console.log("renderProjects: fine at btn"),n.dataset.name=e.dataName,n.dataset.id=e.id,n.type="button",n.classList="btn btn-sidebar btn-sidebar-s btn-project",n.addEventListener("click",(function(){So.activate(e),So.updateNavigationDOM("btn-sidebar","main-title"),wn.renderTasks((function(t){return t.projectId==e.id&&!t.completed}))}));var o=document.createElement("div");o.classList="project-color project-color-s",o.style.background=e.color,n.appendChild(o),n.innerHTML+=e.name,r.appendChild(n),t.appendChild(r)}))}};var jn=document.querySelector(".btn.btn-delete");jn.innerHTML=ve;jn.addEventListener("click",(function(){var t=jn.dataset.id;console.log(t),re.open({type:"project",id:t})}));const Bn=function(t){jn.dataset.id=t,ie(jn)},On=function(){oe(jn)};function Sn(t){return Sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Sn(t)}function Pn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,In(n.key),n)}}function In(t){var e=function(t,e){if("object"!=Sn(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Sn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Sn(e)?e:e+""}function En(t,e,r){return e=Dn(e),function(t,e){if(e&&("object"==Sn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Ln(t)}(t,Mn()?Reflect.construct(e,r||[],Dn(t).constructor):e.apply(t,r))}function Ln(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Mn(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Mn=function(){return!!t})()}function Dn(t){return Dn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Dn(t)}function Tn(t,e){return Tn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Tn(t,e)}function zn(t,e){(function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")})(t,e),e.add(t)}var qn=["#dc2626","#ea580c","#d97706","#ca8a04","#65a30d","#16a34a","#059669","#0d9488","#0891b2","#0284c7","#2563eb","#4f46e5"],Hn=new WeakSet,Gn=function(t){function e(t){var r,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".form-color",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".form-popup-color",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".form-input-color";!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=En(this,e,[t,n,o,i,function(t){return function(t,e,r){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:r;throw new TypeError("Private element is not present on this object")}(Hn,Ln(r),Jn).call(Ln(r),t)}]),zn(r,Hn),qn.forEach((function(t){var e=document.createElement("li");e.classList="form-color-popup-item";var n=document.createElement("button");n.classList="btn project-color project-color-m",n.style.backgroundColor=t,n.dataset.color=t,n.type="button",e.appendChild(n),r.getPopup().appendChild(e)}));var a=qn[0];return r.getButton().style.backgroundColor=a,r.getInput().value=a,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Tn(t,e)}(e,t),r=e,(n=[{key:"updateColor",value:function(t){var e=t&&t.color||qn[0];this.getButton().style.backgroundColor=e,this.getInput().value=e}}])&&Pn(r.prototype,n),o&&Pn(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}($e);function Jn(t){var e=t.target;if(e.classList.contains("project-color")){var r=e.dataset.color;this.getInput().value=r,this.getButton().style.backgroundColor=r,this.close()}}function Wn(t){return Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Wn(t)}function Rn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Nn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Rn(Object(r),!0).forEach((function(e){Yn(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Rn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Yn(t,e,r){return(e=Vn(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Vn(n.key),n)}}function Vn(t){var e=function(t,e){if("object"!=Wn(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Wn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Wn(e)?e:e+""}function Fn(t,e,r){return e=Zn(e),function(t,e){if(e&&("object"==Wn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,Qn()?Reflect.construct(e,r||[],Zn(t).constructor):e.apply(t,r))}function Qn(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(Qn=function(){return!!t})()}function $n(t,e,r,n){var o=Un(Zn(1&n?t.prototype:t),e,r);return 2&n&&"function"==typeof o?function(t){return o.apply(r,t)}:o}function Un(){return Un="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=Zn(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},Un.apply(null,arguments)}function Zn(t){return Zn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Zn(t)}function Xn(t,e){return Xn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Xn(t,e)}const Kn=new(function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=Fn(this,e,[".dialog-add-project",".form-add-project"])).projectName=t.form.querySelector(".form-input-title"),t.error=t.form.querySelector(".form-error"),t.colorPicker=new Gn(".form-add-project"),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Xn(t,e)}(e,t),r=e,n=[{key:"open",value:function(t){var r=this;console.log("projectDialog: just opened the dialog"),$n(e,"open",this,3)([t]),this.submitBtn.textContent=this.current?"Edit Project":"Add Project",this.projectName.value=this.current&&this.current.name||"",this.colorPicker.updateColor(this.current),this.projectName.addEventListener("input",(function(t){var e=t.target.value,n=r.current&&e.toLowerCase()==r.current.name.toLowerCase();console.log("projectDialog: "+r.current),console.log("projectDialog: "+e),console.log(So.exists(e)),!So.exists(e)||n?(oe(r.error),r.submitBtn.disabled=!1):(r.error.textContent="A project with this name already exists",ie(r.error),r.submitBtn.disabled=!0)}))}},{key:"close",value:function(){$n(e,"close",this,3)([]),this.colorPicker.close(),oe(this.error)}},{key:"onSubmit",value:function(t){var e;console.log("projectDialog: just submitted the form"),t.preventDefault();var r=xn.createProject(this.projectName.value,this.colorPicker.getInput().value);this.current&&-1!==this.current.id?(e=this.current.id,r=Nn(Nn({},r),{},{id:e}),xn.getProjects().update(e,r),xn.renderProjects(document.querySelector(".sidebar-nav-list-projects")),wn.renderTasks((function(t){return t.projectId==r.id}))):(console.log("projectDialog: adding a new project"),xn.getProjects().add(r),console.log("projectDialog: "+xn.getProjects()),xn.renderProjects(document.querySelector(".sidebar-nav-list-projects")),console.log("projectDialog: projects rendered"),e=xn.getProjects().getCurrentId()),So.activate(r),So.updateNavigationDOM(),wn.renderTasks((function(t){return t.projectId==e})),this.close()}}],n&&_n(r.prototype,n),o&&_n(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(Qt));var to=document.querySelector(".btn-project-edit");to.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" class="svg-fill"><path d="M3,17V19H9V17H3M3,5V7H13V5H3M13,21V19H21V17H13V15H11V21H13M7,9V11H3V13H7V15H9V9H7M21,13V11H11V13H21M15,9H17V7H21V5H17V3H15V9Z" /></svg>';to.addEventListener("click",(function(){var t=to.dataset.id;Kn.open(xn.getProjects().getList().find((function(e){return e.id==t})))}));const eo=function(t){to.dataset.id=t,ie(to)},ro=function(){oe(to)};function no(t){return no="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},no(t)}function oo(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,io(n.key),n)}}function io(t){var e=function(t,e){if("object"!=no(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=no(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==no(e)?e:e+""}function ao(t,e,r){return e=lo(e),function(t,e){if(e&&("object"==no(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,co()?Reflect.construct(e,r||[],lo(t).constructor):e.apply(t,r))}function co(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(co=function(){return!!t})()}function so(){return so="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=lo(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},so.apply(null,arguments)}function lo(t){return lo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},lo(t)}function uo(t,e){return uo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},uo(t,e)}const Ao=new(function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=ao(this,e,[".dialog-auto-delete",".form-auto-delete"])).numberInput=t.form.querySelector(".form-input-auto-delete-number"),t.unitInput=t.form.querySelector(".form-input-auto-delete-unit"),t.error=t.form.querySelector(".form-error"),t.submitBtn.disabled=!0,t.numberInput.addEventListener("input",(function(){return t.validateInputs()})),t.unitInput.addEventListener("change",(function(){return t.validateInputs()})),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&uo(t,e)}(e,t),r=e,n=[{key:"open",value:function(t){var r,n,o,i,a;console.log("autoDeleteDialog: just opened the dialog."),(r=e,n="open",o=this,a=so(lo(1&(i=3)?r.prototype:r),n,o),2&i&&"function"==typeof a?function(t){return a.apply(o,t)}:a)([t]),this.numberInput.value="",this.unitInput.value="",oe(this.error),this.submitBtn.disabled=!0}},{key:"validateInputs",value:function(){var t=this.numberInput.value.trim(),e=this.unitInput.value;t&&e?(this.submitBtn.disabled=!1,oe(this.error)):(this.submitBtn.disabled=!0,ie(this.error))}},{key:"onSubmit",value:function(t){t.preventDefault();var e=parseInt(this.numberInput.value.trim(),10),r=this.unitInput.value;e&&r?(console.log("autoDeleteDialog: Set auto-delete for ".concat(e," ").concat(r)),this.autoDeleteTime=this.calculateMs(e,r),window.autoDeleteTime=this.autoDeleteTime,console.log("autoDeleteDialog: Auto-delete timer set for ".concat(window.autoDeleteTime," ms")),this.close()):ie(this.error)}},{key:"calculateMs",value:function(t,e){return t*({seconds:1e3,minutes:6e4,hours:36e5,days:864e5,weeks:6048e5,months:2592e6,years:31536e6}[e]||0)}}],n&&oo(r.prototype,n),o&&oo(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(Qt));var fo=document.querySelector(".btn.btn-timer");fo.innerHTML='<svg width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="svg-fill">\r\n<path d="M15 13H16.5V15.82L18.94 17.23L18.19 18.53L15 16.69V13M23 16C23 19.87 19.87 23 16 23C14.09 23 12.36 22.24 11.1 21H8C6.9 21 6 20.1 6 19V7H18V9.29C20.89 10.15 23 12.83 23 16M9 16C9 12.13 12.13 9 16 9H8V19H9.67C9.24 18.09 9 17.07 9 16M16 11C13.24 11 11 13.24 11 16C11 18.76 13.24 21 16 21C18.76 21 21 18.76 21 16C21 13.24 18.76 11 16 11M15.5 4H19V6H5V4H8.5L9.5 3H14.5L15.5 4Z" fill="#A1A1AA"/>\r\n</svg>';fo.addEventListener("click",(function(){Ao.open()}));const po=function(){ie(fo)},mo=function(){oe(fo)};function bo(t,e){return+D(t)>+D(e)}function ho(t){return ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ho(t)}function go(t){return function(t){if(Array.isArray(t))return yo(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return yo(t,e);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?yo(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=Array(e);r<e;r++)n[r]=t[r];return n}function Co(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function vo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Co(Object(r),!0).forEach((function(e){wo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Co(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function wo(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=ho(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=ho(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==ho(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var ko=function(t,e,r,n){return{name:t,dataName:t.replace(" ","_").toLowerCase(),icon:e,active:r,filter:n}},xo=[ko("All Tasks",'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M19 15H15C15 15.7956 14.6839 16.5587 14.1213 17.1213C13.5587 17.6839 12.7956 18 12 18C11.2044 18 10.4413 17.6839 9.87868 17.1213C9.31607 16.5587 9 15.7956 9 15H5V5H19M19 3H5C3.89 3 3 3.9 3 5V19C3 19.5304 3.21071 20.0391 3.58579 20.4142C3.96086 20.7893 4.46957 21 5 21H19C19.5304 21 20.0391 20.7893 20.4142 20.4142C20.7893 20.0391 21 19.5304 21 19V5C21 4.46957 20.7893 3.96086 20.4142 3.58579C20.0391 3.21071 19.5304 3 19 3Z" fill="#A1A1AA"/>\n</svg>\n',!0,(function(t){return!t.completed&&t})),ko("Today",'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M12 15.39L8.24 17.66L9.23 13.38L5.91 10.5L10.29 10.13L12 6.09L13.71 10.13L18.09 10.5L14.77 13.38L15.76 17.66M22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.45 13.97L5.82 21L12 17.27L18.18 21L16.54 13.97L22 9.24Z" fill="#A1A1AA"/>\n</svg>\n',!1,(function(t){return!t.completed&&(t.dueDate&&W(t.dueDate)||T(t.dueDate,q()))})),ko("Upcoming",Ce,!1,(function(t){return!t.completed&&(t.dueDate&&W(t.dueDate)||bo(t.dueDate,q()))})),ko("Recently Completed",'<svg width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class = "svg-fill">\r\n<path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" fill="#A1A1AA"/></svg>',!1,(function(t){return t.completed}))],jo=[],Bo=function(){var t=xn.getProjects().getList().map((function(t){return vo(vo({},t),{},{filter:function(e){return e.projectId==t.id&&!e.completed}})}));jo=[].concat(xo,go(t))},Oo=function(){return jo.find((function(t){return t.active}))};const So={mainNav:xo,getActiveItem:Oo,activate:function(t){Bo(),jo.forEach((function(e){return e.active=e.dataName==t.dataName}))},updateFullNav:Bo,exists:function(t){return!!jo.find((function(e){return e.name.toLowerCase()==t.toLowerCase()}))},updateNavigationDOM:function(){var t=go(document.querySelectorAll("button.btn-sidebar")),e=t.find((function(t){return t.classList.contains("active")})),r=Oo();if(!e||e.dataset.name!=r.dataName){var n=document.querySelector(".btn-add-task-l");"recently_completed"==r.dataName?n.style.display="none":n.style.display="flex";var o=t.find((function(t){return t.dataset.name==r.dataName}));if(o){t.forEach((function(t){return t.classList.remove("active")})),o.classList.add("active");var i=document.querySelector(".main-title-project");r.color?(i.style.backgroundColor=r.color,ie(i),Bn(o.dataset.id),eo(o.dataset.id),mo()):(oe(i),On(),ro(),po()),document.querySelector(".main-title").textContent=r.name}}}};function Po(t){return Po="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Po(t)}function Io(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Eo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Io(Object(r),!0).forEach((function(e){Lo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Io(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Lo(t,e,r){return(e=Do(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Mo(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Do(n.key),n)}}function Do(t){var e=function(t,e){if("object"!=Po(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=Po(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==Po(e)?e:e+""}function To(t,e,r){return e=Ho(e),function(t,e){if(e&&("object"==Po(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,zo()?Reflect.construct(e,r||[],Ho(t).constructor):e.apply(t,r))}function zo(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(zo=function(){return!!t})()}function qo(){return qo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!{}.hasOwnProperty.call(t,e)&&null!==(t=Ho(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},qo.apply(null,arguments)}function Ho(t){return Ho=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ho(t)}function Go(t,e){return Go=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Go(t,e)}var Jo=".dialog-add-edit";const Wo=new(function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=To(this,e,[Jo,".form-add-edit"])).datePicker=new De(Jo),t.projectSelect=new Wr(Jo),t.prioritySelect=new xr(Jo),t.nameInput=t.form.querySelector(".form-input-title"),t.descriptionInput=t.form.querySelector(".form-input-description"),t}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Go(t,e)}(e,t),r=e,n=[{key:"open",value:function(t){var r,n,o,i,a,c=this;console.log("addEditDialog: just opened the dialog"),(r=e,n="open",o=this,a=qo(Ho(1&(i=3)?r.prototype:r),n,o),2&i&&"function"==typeof a?function(t){return a.apply(o,t)}:a)([t]),console.log("addEditDialog: "+(this.current?"edit":"add"));var s=So.getActiveItem();if(console.log(s),console.log(s.color?"project":"not a project"),this.projectSelect.updateList(),s.color){var l=s.id;this.projectSelect.updateList(),console.log("addEditDialog: updated projects list");var u=xn.find((function(t){return t.id==l}));console.log("addEditDialog: - selected project : "+u.id),this.projectSelect.setCurrentProject(u)}else this.projectSelect.setCurrentProject(this.current&&this.current.projectId?xn.find((function(t){return t.id==c.current.projectId})):null);var d=this.current&&this.current.description||"";this.descriptionInput.value=d,this.descriptionInput.parentNode.dataset.value=d,"today"==s.dataName?this.current&&!this.current.dueDate?this.datePicker.updateDate(null):this.datePicker.updateDate(this.current&&this.current.dueDate||q()):this.datePicker.updateDate(this.current&&this.current.dueDate||null),this.nameInput.value=this.current&&this.current.title||"",this.submitBtn.textContent=this.current?"Edit Task":"Add Task",this.prioritySelect.setCurrentPriority(this.current&&this.current.priority||4)}},{key:"onSubmit",value:function(t){console.log("addEditDialog: just clicked to add a task"),t.preventDefault();var e=wn.createTask(this.nameInput.value,this.descriptionInput.value||null,this.datePicker.getDate(),this.projectSelect.getInput().value,this.prioritySelect.getInput().value);if(this.current&&-1!==this.current.id){var r=this.current.id;wn.getTasks().update(r,Eo(Eo({},e),{},{id:r}))}else wn.getTasks().add(e);console.log("Active filter:",So.getActiveItem().filter);var n=So.getActiveItem();n.color?wn.renderTasks((function(t){return t.projectId==n.id&&!t.completed})):wn.renderTasks(So.getActiveItem().filter),console.log("Tasks after filter:",wn.getTasks().getList().filter(So.getActiveItem().filter)),console.log("addEditDialog: TASK CREATED"),this.close()}}],n&&Mo(r.prototype,n),o&&Mo(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(Qt));function Ro(t){var e=document.createElement("button");return e.classList="btn btn-add-task ".concat(t),e.innerHTML='<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM11.4444 7.55556C11.4444 7.24873 11.6932 7 12 7C12.3068 7 12.5556 7.24873 12.5556 7.55556V11.4444H16.4444C16.7513 11.4444 17 11.6932 17 12C17 12.3068 16.7513 12.5556 16.4444 12.5556H12.5556V16.4444C12.5556 16.7513 12.3068 17 12 17C11.6932 17 11.4444 16.7513 11.4444 16.4444V12.5556H7.55556C7.24873 12.5556 7 12.3068 7 12C7 11.6932 7.24873 11.4444 7.55556 11.4444H11.4444V7.55556Z" fill="#3B82F6"/>\n</svg>\nAdd Task',e.addEventListener("click",(function(){return Wo.open()})),e}var No,Yo=document.querySelector(".main"),_o=document.querySelector(".sidebar"),Vo=document.querySelector(".sidebar-container"),Fo=document.querySelector(".sidebar-bg"),Qo=function(t){return Yt('<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-stroke">\n<path d="M9 3V21M5 3H19C20.1046 3 21 3.89543 21 5V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V5C3 3.89543 3.89543 3 5 3Z" stroke="#71717A" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n',"Sidebar",t)},$o=function(t){return No=t},Uo=function(){ie(Fo),ie(_o),No&&oe(No),Yo.classList.toggle("sidebar-open"),setTimeout((function(){_o.style.transform="translateX(0)",setTimeout((function(){Vo.style.position="static"}),150)}),0)},Zo=function(){oe(Fo),Vo.style.position="fixed",_o.style.transform="translateX(-100%)",Yo.classList.toggle("sidebar-open"),setTimeout((function(){oe(_o),No&&ie(No)}),300)};Fo.addEventListener("click",Zo);var Xo=function(){var t=document.querySelector(".main-header"),e=Qo(Uo);t.insertBefore(e,t.children[0]),$o(e)};var Ko=localStorage.theme||"light",ti={light:'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M5.6 19.7273L4.31818 18.4455L5.94545 16.8091L7.23636 18.1L5.6 19.7273ZM6.54545 12C6.54545 8.99091 8.99091 6.54545 12 6.54545C15.0091 6.54545 17.4545 8.98182 17.4545 12C17.4545 15.0091 15.0091 17.4545 12 17.4545C8.99091 17.4545 6.54545 15.0091 6.54545 12ZM22 12.9091H19.2727V11.0909H22V12.9091ZM18.4 19.7273L16.7636 18.1L18.0545 16.8091L19.6818 18.4455L18.4 19.7273ZM18.4 4.36364L19.6818 5.63636L18.0545 7.28182L16.7636 5.99091L18.4 4.36364ZM11.0909 2H12.9091V4.72727H11.0909V2ZM5.6 4.36364L7.23636 5.99091L5.94545 7.28182L4.31818 5.63636L5.6 4.36364ZM4.72727 12.9091H2V11.0909H4.72727V12.9091ZM11.0909 22V19.2727H12.9091V22H11.0909ZM12 15.6364C14.0083 15.6364 15.6364 14.0083 15.6364 12C15.6364 9.9917 14.0083 8.36364 12 8.36364C9.99172 8.36364 8.36366 9.9917 8.36366 12C8.36366 14.0083 9.99172 15.6364 12 15.6364Z" fill="#71717A"/>\n</svg>\n',dark:'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path d="M17.75 4.09L15.22 6.03L16.13 9.09L13.5 7.28L10.87 9.09L11.78 6.03L9.25001 4.09L12.44 4L13.5 1L14.56 4L17.75 4.09ZM21.25 11L19.61 12.25L20.2 14.23L18.5 13.06L16.8 14.23L17.39 12.25L15.75 11L17.81 10.95L18.5 9L19.19 10.95L21.25 11ZM18.97 15.95C19.8 15.87 20.69 17.05 20.16 17.8C19.84 18.25 19.5 18.67 19.08 19.07C15.17 23 8.84001 23 4.94001 19.07C1.03001 15.17 1.03001 8.83 4.94001 4.93C5.34001 4.53 5.76001 4.17 6.21001 3.85C6.96001 3.32 8.14001 4.21 8.06001 5.04C7.79001 7.9 8.75001 10.87 10.95 13.06C13.14 15.26 16.1 16.22 18.97 15.95ZM17.33 17.97C14.5 17.81 11.7 16.64 9.53001 14.5C7.36001 12.31 6.20001 9.5 6.04001 6.68C3.23001 9.82 3.34001 14.64 6.35001 17.66C9.37001 20.67 14.19 20.78 17.33 17.97Z" fill="#A1A1AA"/>\n</svg>\n'},ei=function(){return ti[Ko]};const ri=ei,ni=function(){Ko="light"==Ko?"dark":"light",localStorage.theme=Ko},oi=function(t){t.innerHTML=ei(),document.body.classList="theme-".concat(Ko)};var ii=function(t){var e=document.createElement("li");return e.classList="sidebar-nav-list-item",e.appendChild(t),e},ai=function(){var t=Yt(ri(),"Change Theme",(function(t){ni(),oi(t.target)})),e=Qo(Zo);document.querySelector(".sidebar-header").append(t,e),oi(t)},ci=function(){var t=document.querySelector(".sidebar-nav-list-main");t.appendChild(ii(Ro("btn-sidebar btn-sidebar-l"))),So.mainNav.forEach((function(e){var r=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=t.name,o=t.dataName,i=t.icon,a=document.createElement("button");return a.type="button",a.classList="btn btn-sidebar ".concat(e||""),a.innerHTML=i+n,a.dataset.name=o,r&&a.addEventListener("click",r),a}(e,"btn-sidebar-l",(function(){So.activate(e),So.updateNavigationDOM(),wn.renderTasks(e.filter)}));t.appendChild(ii(r))}))};var si=wn.getTasks(),li=new Map;setInterval((function(){var t=window.autoDeleteTime||864e4;si.getList().forEach((function(e){var r=e.id;if(e.completed){if(!li.has(r)){var n=setTimeout((function(){si.delete(r),wn.renderTasks((function(t){return t.completed})),console.log("autoDelete: Deleted task with id ".concat(r," after ").concat(t,"ms")),li.delete(r)}),t);li.set(r,n),console.log("autoDelete: Scheduled deletion for task with id ".concat(r))}}else li.has(r)&&(clearTimeout(li.get(r)),li.delete(r),console.log("autoDelete: Canceled deletion for task with id ".concat(r)))}))}),1);var ui=document.querySelector("link[rel ~= 'icon']");ui||((ui=document.createElement("link")).rel="icon",document.head.appendChild(ui));var di=new Blob(['<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">\r\n<path d="M0.41,13.41L6,19L7.41,17.58L1.83,12M22.24,5.58L11.66,16.17L7.5,12L6.07,13.41L11.66,19L23.66,7M18,7L16.59,5.58L10.24,11.93L11.66,13.34L18,7Z" fill="#A1A1AA"/></svg>'],{type:"image/svg+xml"}),Ai=URL.createObjectURL(di);ui.href=Ai,ai(),ci(),function(){var t=Yt('<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svg-fill">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M12 3C11.4477 3 11 3.44772 11 4V11L4 11C3.44772 11 3 11.4477 3 12C3 12.5523 3.44772 13 4 13H11V20C11 20.5523 11.4477 21 12 21C12.5523 21 13 20.5523 13 20V13H20C20.5523 13 21 12.5523 21 12C21 11.4477 20.5523 11 20 11L13 11V4C13 3.44772 12.5523 3 12 3Z" fill="#71717A"/>\n</svg>\n',"Add Project",(function(){return Kn.open(null)}));document.querySelector(".sidebar-projects-header").appendChild(t),xn.renderProjects(document.querySelector(".sidebar-nav-list-projects"))}(),Xo(),document.querySelector(".main").appendChild(Ro("btn-add-task-l")),So.updateFullNav(),So.updateNavigationDOM(),window.addEventListener("click",(function(){return console.log(So.getActiveItem())})),document.addEventListener("DOMContentLoaded",(function(){return wn.renderTasks(So.getActiveItem().filter)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,